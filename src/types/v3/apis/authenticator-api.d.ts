/**
 * Copyright (c) 2022-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.10.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { RequestArgs, BaseAPI } from '../base';
import { Authenticator } from '../models';
import { Http } from '../../http';
import { Collection } from '../../collection';
import type { V2Configuration } from '../../configuration';
import type { Configuration } from '../configuration';
/**
 * AuthenticatorApi - request parameter creator
 * @export
 */
export declare const AuthenticatorApiRequestParamCreator: (configuration?: Configuration & V2Configuration) => {
    http: Http;
    /**
      * Enumerates authenticators in your organization.
      * @summary List Authenticators
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    listAuthenticators: (options?: any) => RequestArgs;
    /**
      * Fetches an authenticator from your Okta organization by `authenticatorId`.
      * @summary Get Authenticator
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getAuthenticator: (authenticatorId: string, options?: any) => RequestArgs;
    /**
      * Updates an authenticator
      * @summary Update Authenticator
      * @param {Authenticator} body
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateAuthenticator: (body: Authenticator, authenticatorId: string, options?: any) => RequestArgs;
    /**
      * Activates an authenticator by `authenticatorId`.
      * @summary Activate Authenticator
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    activateAuthenticator: (authenticatorId: string, options?: any) => RequestArgs;
    /**
      * Deactivates an authenticator by `authenticatorId`.
      * @summary Deactivate Authenticator
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    deactivateAuthenticator: (authenticatorId: string, options?: any) => RequestArgs;
};
/**
 * AuthenticatorApi - functional programming interface
 * @export
 */
export declare const AuthenticatorApiFp: (configuration?: Configuration & V2Configuration) => {
    /**
      * Enumerates authenticators in your organization.
      * @summary List Authenticators
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    listAuthenticators(options?: any): (http?: Http, basePath?: string) => Collection<Authenticator>;
    /**
      * Fetches an authenticator from your Okta organization by `authenticatorId`.
      * @summary Get Authenticator
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getAuthenticator(authenticatorId: string, options?: any): (http?: Http, basePath?: string) => Promise<Authenticator>;
    /**
      * Updates an authenticator
      * @summary Update Authenticator
      * @param {Authenticator} body
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateAuthenticator(body: Authenticator, authenticatorId: string, options?: any): (http?: Http, basePath?: string) => Promise<Authenticator>;
    /**
      * Activates an authenticator by `authenticatorId`.
      * @summary Activate Authenticator
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    activateAuthenticator(authenticatorId: string, options?: any): (http?: Http, basePath?: string) => Promise<Authenticator>;
    /**
      * Deactivates an authenticator by `authenticatorId`.
      * @summary Deactivate Authenticator
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    deactivateAuthenticator(authenticatorId: string, options?: any): (http?: Http, basePath?: string) => Promise<Authenticator>;
};
/**
 * AuthenticatorApi - factory interface
 * @export
 */
export declare const AuthenticatorApiFactory: (configuration?: Configuration, basePath?: string, http?: Http) => {
    /**
      * Enumerates authenticators in your organization.
      * @summary List Authenticators
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    listAuthenticators(options?: any): Collection<Authenticator>;
    /**
      * Fetches an authenticator from your Okta organization by `authenticatorId`.
      * @summary Get Authenticator
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getAuthenticator(authenticatorId: string, options?: any): Promise<Authenticator>;
    /**
      * Updates an authenticator
      * @summary Update Authenticator
      * @param {Authenticator} body
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateAuthenticator(body: Authenticator, authenticatorId: string, options?: any): Promise<Authenticator>;
    /**
      * Activates an authenticator by `authenticatorId`.
      * @summary Activate Authenticator
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    activateAuthenticator(authenticatorId: string, options?: any): Promise<Authenticator>;
    /**
      * Deactivates an authenticator by `authenticatorId`.
      * @summary Deactivate Authenticator
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    deactivateAuthenticator(authenticatorId: string, options?: any): Promise<Authenticator>;
};
/**
 * AuthenticatorApi - object-oriented interface
 * @export
 * @class AuthenticatorApi
 * @extends {BaseAPI}
 */
export declare class AuthenticatorApi extends BaseAPI {
  /**
      * Enumerates authenticators in your organization.
      * @summary List Authenticators
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof AuthenticatorApi
      */
  listAuthenticators(options?: any): Collection<Authenticator>;
  /**
      * Fetches an authenticator from your Okta organization by `authenticatorId`.
      * @summary Get Authenticator
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof AuthenticatorApi
      */
  getAuthenticator(authenticatorId: string, options?: any): Promise<Authenticator>;
  /**
      * Updates an authenticator
      * @summary Update Authenticator
      * @param {Authenticator} body
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof AuthenticatorApi
      */
  updateAuthenticator(body: Authenticator, authenticatorId: string, options?: any): Promise<Authenticator>;
  /**
      * Activates an authenticator by `authenticatorId`.
      * @summary Activate Authenticator
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof AuthenticatorApi
      */
  activateAuthenticator(authenticatorId: string, options?: any): Promise<Authenticator>;
  /**
      * Deactivates an authenticator by `authenticatorId`.
      * @summary Deactivate Authenticator
      * @param {string} authenticatorId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof AuthenticatorApi
      */
  deactivateAuthenticator(authenticatorId: string, options?: any): Promise<Authenticator>;
}
