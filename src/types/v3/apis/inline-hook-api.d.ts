/**
 * Copyright (c) 2022-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.10.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { RequestArgs, BaseAPI } from '../base';
import { InlineHook } from '../models';
import { InlineHookPayload } from '../models';
import { InlineHookResponse } from '../models';
import { Http } from '../../http';
import { Collection } from '../../collection';
import type { V2Configuration } from '../../configuration';
import type { Configuration } from '../configuration';
/**
 * InlineHookApi - request parameter creator
 * @export
 */
export declare const InlineHookApiRequestParamCreator: (configuration?: Configuration & V2Configuration) => {
    http: Http;
    /**
      * Activates the Inline Hook matching the provided id
      * @summary Activate Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    activateInlineHook: (inlineHookId: string, options?: any) => RequestArgs;
    /**
      * Success
      * @summary Create Inline Hook
      * @param {InlineHook} body
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    createInlineHook: (body: InlineHook, options?: any) => RequestArgs;
    /**
      * Deactivates the Inline Hook matching the provided id
      * @summary Deactivate Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    deactivateInlineHook: (inlineHookId: string, options?: any) => RequestArgs;
    /**
      * Deletes the Inline Hook matching the provided id. Once deleted, the Inline Hook is unrecoverable. As a safety precaution, only Inline Hooks with a status of INACTIVE are eligible for deletion.
      * @summary Delete Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    deleteInlineHook: (inlineHookId: string, options?: any) => RequestArgs;
    /**
      * Executes the Inline Hook matching the provided inlineHookId using the request body as the input. This will send the provided data through the Channel and return a response if it matches the correct data contract. This execution endpoint should only be used for testing purposes.
      * @summary Execute Inline Hook
      * @param {InlineHookPayload} body
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    executeInlineHook: (body: InlineHookPayload, inlineHookId: string, options?: any) => RequestArgs;
    /**
      * Gets an inline hook by ID
      * @summary Get Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getInlineHook: (inlineHookId: string, options?: any) => RequestArgs;
    /**
      * Success
      * @summary List Inline Hooks
      * @param {string} [type]
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    listInlineHooks: (type?: string, options?: any) => RequestArgs;
    /**
      * Updates an inline hook by ID
      * @summary Update Inline Hook
      * @param {InlineHook} body
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateInlineHook: (body: InlineHook, inlineHookId: string, options?: any) => RequestArgs;
};
/**
 * InlineHookApi - functional programming interface
 * @export
 */
export declare const InlineHookApiFp: (configuration?: Configuration & V2Configuration) => {
    /**
      * Activates the Inline Hook matching the provided id
      * @summary Activate Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    activateInlineHook(inlineHookId: string, options?: any): (http?: Http, basePath?: string) => Promise<InlineHook>;
    /**
      * Success
      * @summary Create Inline Hook
      * @param {InlineHook} body
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    createInlineHook(body: InlineHook, options?: any): (http?: Http, basePath?: string) => Promise<InlineHook>;
    /**
      * Deactivates the Inline Hook matching the provided id
      * @summary Deactivate Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    deactivateInlineHook(inlineHookId: string, options?: any): (http?: Http, basePath?: string) => Promise<InlineHook>;
    /**
      * Deletes the Inline Hook matching the provided id. Once deleted, the Inline Hook is unrecoverable. As a safety precaution, only Inline Hooks with a status of INACTIVE are eligible for deletion.
      * @summary Delete Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    deleteInlineHook(inlineHookId: string, options?: any): (http?: Http, basePath?: string) => Promise<Record<string, never>>;
    /**
      * Executes the Inline Hook matching the provided inlineHookId using the request body as the input. This will send the provided data through the Channel and return a response if it matches the correct data contract. This execution endpoint should only be used for testing purposes.
      * @summary Execute Inline Hook
      * @param {InlineHookPayload} body
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    executeInlineHook(body: InlineHookPayload, inlineHookId: string, options?: any): (http?: Http, basePath?: string) => Promise<InlineHookResponse>;
    /**
      * Gets an inline hook by ID
      * @summary Get Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getInlineHook(inlineHookId: string, options?: any): (http?: Http, basePath?: string) => Promise<InlineHook>;
    /**
      * Success
      * @summary List Inline Hooks
      * @param {string} [type]
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    listInlineHooks(type?: string, options?: any): (http?: Http, basePath?: string) => Collection<InlineHook>;
    /**
      * Updates an inline hook by ID
      * @summary Update Inline Hook
      * @param {InlineHook} body
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateInlineHook(body: InlineHook, inlineHookId: string, options?: any): (http?: Http, basePath?: string) => Promise<InlineHook>;
};
/**
 * InlineHookApi - factory interface
 * @export
 */
export declare const InlineHookApiFactory: (configuration?: Configuration, basePath?: string, http?: Http) => {
    /**
      * Activates the Inline Hook matching the provided id
      * @summary Activate Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    activateInlineHook(inlineHookId: string, options?: any): Promise<InlineHook>;
    /**
      * Success
      * @summary Create Inline Hook
      * @param {InlineHook} body
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    createInlineHook(body: InlineHook, options?: any): Promise<InlineHook>;
    /**
      * Deactivates the Inline Hook matching the provided id
      * @summary Deactivate Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    deactivateInlineHook(inlineHookId: string, options?: any): Promise<InlineHook>;
    /**
      * Deletes the Inline Hook matching the provided id. Once deleted, the Inline Hook is unrecoverable. As a safety precaution, only Inline Hooks with a status of INACTIVE are eligible for deletion.
      * @summary Delete Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    deleteInlineHook(inlineHookId: string, options?: any): Promise<Record<string, never>>;
    /**
      * Executes the Inline Hook matching the provided inlineHookId using the request body as the input. This will send the provided data through the Channel and return a response if it matches the correct data contract. This execution endpoint should only be used for testing purposes.
      * @summary Execute Inline Hook
      * @param {InlineHookPayload} body
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    executeInlineHook(body: InlineHookPayload, inlineHookId: string, options?: any): Promise<InlineHookResponse>;
    /**
      * Gets an inline hook by ID
      * @summary Get Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getInlineHook(inlineHookId: string, options?: any): Promise<InlineHook>;
    /**
      * Success
      * @summary List Inline Hooks
      * @param {string} [type]
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    listInlineHooks(type?: string, options?: any): Collection<InlineHook>;
    /**
      * Updates an inline hook by ID
      * @summary Update Inline Hook
      * @param {InlineHook} body
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateInlineHook(body: InlineHook, inlineHookId: string, options?: any): Promise<InlineHook>;
};
/**
 * InlineHookApi - object-oriented interface
 * @export
 * @class InlineHookApi
 * @extends {BaseAPI}
 */
export declare class InlineHookApi extends BaseAPI {
  /**
      * Activates the Inline Hook matching the provided id
      * @summary Activate Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof InlineHookApi
      */
  activateInlineHook(inlineHookId: string, options?: any): Promise<InlineHook>;
  /**
      * Success
      * @summary Create Inline Hook
      * @param {InlineHook} body
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof InlineHookApi
      */
  createInlineHook(body: InlineHook, options?: any): Promise<InlineHook>;
  /**
      * Deactivates the Inline Hook matching the provided id
      * @summary Deactivate Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof InlineHookApi
      */
  deactivateInlineHook(inlineHookId: string, options?: any): Promise<InlineHook>;
  /**
      * Deletes the Inline Hook matching the provided id. Once deleted, the Inline Hook is unrecoverable. As a safety precaution, only Inline Hooks with a status of INACTIVE are eligible for deletion.
      * @summary Delete Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof InlineHookApi
      */
  deleteInlineHook(inlineHookId: string, options?: any): Promise<Record<string, never>>;
  /**
      * Executes the Inline Hook matching the provided inlineHookId using the request body as the input. This will send the provided data through the Channel and return a response if it matches the correct data contract. This execution endpoint should only be used for testing purposes.
      * @summary Execute Inline Hook
      * @param {InlineHookPayload} body
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof InlineHookApi
      */
  executeInlineHook(body: InlineHookPayload, inlineHookId: string, options?: any): Promise<InlineHookResponse>;
  /**
      * Gets an inline hook by ID
      * @summary Get Inline Hook
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof InlineHookApi
      */
  getInlineHook(inlineHookId: string, options?: any): Promise<InlineHook>;
  /**
      * Success
      * @summary List Inline Hooks
      * @param {string} [type]
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof InlineHookApi
      */
  listInlineHooks(type?: string, options?: any): Collection<InlineHook>;
  /**
      * Updates an inline hook by ID
      * @summary Update Inline Hook
      * @param {InlineHook} body
      * @param {string} inlineHookId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof InlineHookApi
      */
  updateInlineHook(body: InlineHook, inlineHookId: string, options?: any): Promise<InlineHook>;
}
