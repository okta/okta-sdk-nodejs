/**
 * Copyright (c) 2022-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.10.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { RequestArgs, BaseAPI } from '../base';
import { GroupSchema } from '../models';
import { UserSchema } from '../models';
import { Http } from '../../http';
import type { V2Configuration } from '../../configuration';
import type { Configuration } from '../configuration';
/**
 * SchemaApi - request parameter creator
 * @export
 */
export declare const SchemaApiRequestParamCreator: (configuration?: Configuration & V2Configuration) => {
    http: Http;
    /**
      * Fetches the Schema for an App User
      * @summary Fetches the Schema for an App User
      * @param {string} appInstanceId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getApplicationUserSchema: (appInstanceId: string, options?: any) => RequestArgs;
    /**
      * Partial updates on the User Profile properties of the Application User Schema.
      * @summary Partial updates on the User Profile properties of the Application User Schema.
      * @param {string} appInstanceId
      * @param {UserSchema} [body]
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateApplicationUserProfile: (appInstanceId: string, body?: UserSchema, options?: any) => RequestArgs;
    /**
      * Fetches the group schema
      * @summary Fetches the group schema
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getGroupSchema: (options?: any) => RequestArgs;
    /**
      * Updates, adds ore removes one or more custom Group Profile properties in the schema
      * @summary Updates, adds ore removes one or more custom Group Profile properties in the schema
      * @param {GroupSchema} [body]
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateGroupSchema: (body?: GroupSchema, options?: any) => RequestArgs;
    /**
      * Fetches the schema for a Schema Id.
      * @summary Fetches the schema for a Schema Id.
      * @param {string} schemaId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getUserSchema: (schemaId: string, options?: any) => RequestArgs;
    /**
      * Partial updates on the User Profile properties of the user schema.
      * @summary Update User Profile
      * @param {UserSchema} body
      * @param {string} schemaId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateUserProfile: (body: UserSchema, schemaId: string, options?: any) => RequestArgs;
};
/**
 * SchemaApi - functional programming interface
 * @export
 */
export declare const SchemaApiFp: (configuration?: Configuration & V2Configuration) => {
    /**
      * Fetches the Schema for an App User
      * @summary Fetches the Schema for an App User
      * @param {string} appInstanceId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getApplicationUserSchema(appInstanceId: string, options?: any): (http?: Http, basePath?: string) => Promise<UserSchema>;
    /**
      * Partial updates on the User Profile properties of the Application User Schema.
      * @summary Partial updates on the User Profile properties of the Application User Schema.
      * @param {string} appInstanceId
      * @param {UserSchema} [body]
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateApplicationUserProfile(appInstanceId: string, body?: UserSchema, options?: any): (http?: Http, basePath?: string) => Promise<UserSchema>;
    /**
      * Fetches the group schema
      * @summary Fetches the group schema
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getGroupSchema(options?: any): (http?: Http, basePath?: string) => Promise<GroupSchema>;
    /**
      * Updates, adds ore removes one or more custom Group Profile properties in the schema
      * @summary Updates, adds ore removes one or more custom Group Profile properties in the schema
      * @param {GroupSchema} [body]
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateGroupSchema(body?: GroupSchema, options?: any): (http?: Http, basePath?: string) => Promise<GroupSchema>;
    /**
      * Fetches the schema for a Schema Id.
      * @summary Fetches the schema for a Schema Id.
      * @param {string} schemaId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getUserSchema(schemaId: string, options?: any): (http?: Http, basePath?: string) => Promise<UserSchema>;
    /**
      * Partial updates on the User Profile properties of the user schema.
      * @summary Update User Profile
      * @param {UserSchema} body
      * @param {string} schemaId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateUserProfile(body: UserSchema, schemaId: string, options?: any): (http?: Http, basePath?: string) => Promise<UserSchema>;
};
/**
 * SchemaApi - factory interface
 * @export
 */
export declare const SchemaApiFactory: (configuration?: Configuration, basePath?: string, http?: Http) => {
    /**
      * Fetches the Schema for an App User
      * @summary Fetches the Schema for an App User
      * @param {string} appInstanceId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getApplicationUserSchema(appInstanceId: string, options?: any): Promise<UserSchema>;
    /**
      * Partial updates on the User Profile properties of the Application User Schema.
      * @summary Partial updates on the User Profile properties of the Application User Schema.
      * @param {string} appInstanceId
      * @param {UserSchema} [body]
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateApplicationUserProfile(appInstanceId: string, body?: UserSchema, options?: any): Promise<UserSchema>;
    /**
      * Fetches the group schema
      * @summary Fetches the group schema
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getGroupSchema(options?: any): Promise<GroupSchema>;
    /**
      * Updates, adds ore removes one or more custom Group Profile properties in the schema
      * @summary Updates, adds ore removes one or more custom Group Profile properties in the schema
      * @param {GroupSchema} [body]
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateGroupSchema(body?: GroupSchema, options?: any): Promise<GroupSchema>;
    /**
      * Fetches the schema for a Schema Id.
      * @summary Fetches the schema for a Schema Id.
      * @param {string} schemaId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    getUserSchema(schemaId: string, options?: any): Promise<UserSchema>;
    /**
      * Partial updates on the User Profile properties of the user schema.
      * @summary Update User Profile
      * @param {UserSchema} body
      * @param {string} schemaId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      */
    updateUserProfile(body: UserSchema, schemaId: string, options?: any): Promise<UserSchema>;
};
/**
 * SchemaApi - object-oriented interface
 * @export
 * @class SchemaApi
 * @extends {BaseAPI}
 */
export declare class SchemaApi extends BaseAPI {
  /**
      * Fetches the Schema for an App User
      * @summary Fetches the Schema for an App User
      * @param {string} appInstanceId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof SchemaApi
      */
  getApplicationUserSchema(appInstanceId: string, options?: any): Promise<UserSchema>;
  /**
      * Partial updates on the User Profile properties of the Application User Schema.
      * @summary Partial updates on the User Profile properties of the Application User Schema.
      * @param {string} appInstanceId
      * @param {UserSchema} [body]
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof SchemaApi
      */
  updateApplicationUserProfile(appInstanceId: string, body?: UserSchema, options?: any): Promise<UserSchema>;
  /**
      * Fetches the group schema
      * @summary Fetches the group schema
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof SchemaApi
      */
  getGroupSchema(options?: any): Promise<GroupSchema>;
  /**
      * Updates, adds ore removes one or more custom Group Profile properties in the schema
      * @summary Updates, adds ore removes one or more custom Group Profile properties in the schema
      * @param {GroupSchema} [body]
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof SchemaApi
      */
  updateGroupSchema(body?: GroupSchema, options?: any): Promise<GroupSchema>;
  /**
      * Fetches the schema for a Schema Id.
      * @summary Fetches the schema for a Schema Id.
      * @param {string} schemaId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof SchemaApi
      */
  getUserSchema(schemaId: string, options?: any): Promise<UserSchema>;
  /**
      * Partial updates on the User Profile properties of the user schema.
      * @summary Update User Profile
      * @param {UserSchema} body
      * @param {string} schemaId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof SchemaApi
      */
  updateUserProfile(body: UserSchema, schemaId: string, options?: any): Promise<UserSchema>;
}
