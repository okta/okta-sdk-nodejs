/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { DevicePolicyRuleConditionAssurance } from './../models/DevicePolicyRuleConditionAssurance';
/**
* <x-lifecycle class=\"oie\"></x-lifecycle> Specifies the device condition to match on
*/
export declare class DeviceAccessPolicyRuleCondition {
  'assurance'?: DevicePolicyRuleConditionAssurance;
  /**
    * Indicates if the device is managed. A device is considered managed if it\'s part of a device management system.
    */
  'managed'?: boolean;
  /**
    * Indicates if the device is registered. A device is registered if the User enrolls with Okta Verify that\'s installed on the device. When the `managed` property is passed, you must also include the `registered` property and set it to `true`.
    */
  'registered'?: boolean;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
