/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HrefObject } from './../models/HrefObject';
/**
* Specifies link relations (see [Web Linking](https://datatracker.ietf.org/doc/html/rfc8288) available for the current status of a user. The links object is used for dynamic discovery of related resources, lifecycle operations, and credential operations. The links object is read-only.  For an individual user result, the links object contains a full set of link relations available for that user as determined by your policies. For a collection of users, the links object contains only the `self` link. Operations that return a collection of users include [List all users](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/User/#tag/User/operation/listUsers) and [List all group member users](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/Group/#tag/Group/operation/listGroupUsers).
*/
export declare class UserLinks {
  /**
    * URL to the individual user
    */
  'self'?: HrefObject;
  /**
    * URL to activate the user
    */
  'activate'?: HrefObject;
  /**
    * URL to reset the user\'s password
    */
  'resetPassword'?: HrefObject;
  /**
    * URL to reset the user\'s factors
    */
  'resetFactors'?: HrefObject;
  /**
    * URL to expire the user\'s password
    */
  'expirePassword'?: HrefObject;
  /**
    * URL to initiate a forgot password operation
    */
  'forgotPassword'?: HrefObject;
  /**
    * URL to change the user\'s recovery question
    */
  'changeRecoveryQuestion'?: HrefObject;
  /**
    * URL to deactivate a user
    */
  'deactivate'?: HrefObject;
  /**
    * URL to reactivate the user
    */
  'reactivate'?: HrefObject;
  /**
    * URL to change the user\'s password
    */
  'changePassword'?: HrefObject;
  /**
    * URL to the user\'s profile schema
    */
  'schema'?: HrefObject;
  /**
    * URL to suspend the user
    */
  'suspend'?: HrefObject;
  /**
    * URL to unsuspend the user
    */
  'unsuspend'?: HrefObject;
  /**
    * URL to unlock the locked-out user
    */
  'unlock'?: HrefObject;
  /**
    * URL to the user type
    */
  'type'?: HrefObject;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
