/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { LogActor } from './../models/LogActor';
import { LogAuthenticationContext } from './../models/LogAuthenticationContext';
import { LogClient } from './../models/LogClient';
import { LogDebugContext } from './../models/LogDebugContext';
import { LogOutcome } from './../models/LogOutcome';
import { LogRequest } from './../models/LogRequest';
import { LogSecurityContext } from './../models/LogSecurityContext';
import { LogSeverity } from './../models/LogSeverity';
import { LogTarget } from './../models/LogTarget';
import { LogTransaction } from './../models/LogTransaction';
export declare class LogEvent {
  'actor'?: LogActor;
  'authenticationContext'?: LogAuthenticationContext;
  'client'?: LogClient;
  'debugContext'?: LogDebugContext;
  /**
    * The display message for an event
    */
  'displayMessage'?: string;
  /**
    * The published event type. Event instances are categorized by action in the event type attribute. This attribute is key to navigating the System Log through expression filters. See [Event Types catalog](https://developer.okta.com/docs/reference/api/event-types/#catalog) for a complete list of System Log event types.
    */
  'eventType'?: string;
  /**
    * Associated Events API Action `objectType` attribute value
    */
  'legacyEventType'?: string;
  'outcome'?: LogOutcome;
  /**
    * Timestamp when the event is published
    */
  'published'?: Date;
  'request'?: LogRequest;
  'securityContext'?: LogSecurityContext;
  'severity'?: LogSeverity;
  'target'?: Array<LogTarget>;
  'transaction'?: LogTransaction;
  /**
    * Unique identifier for an individual event
    */
  'uuid'?: string;
  /**
    * Versioning indicator
    */
  'version'?: string;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
