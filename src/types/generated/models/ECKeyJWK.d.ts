/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
* Elliptic curve key in JSON Web Key (JWK) format. It\'s used during enrollment to encrypt fulfillment requests to Yubico, or during activation to verify Yubico\'s JWS (JSON Web Signature) objects in fulfillment responses. The currently agreed protocol uses P-384.
*/
export declare class ECKeyJWK {
  /**
    * The elliptic curve protocol
    */
  'crv': ECKeyJWKCrvEnum;
  /**
    * The unique identifier of the key
    */
  'kid': string;
  /**
    * The type of public key
    */
  'kty': ECKeyJWKKtyEnum;
  /**
    * The intended use for the key. This value is either `enc` (encryption) during enrollment, when Okta uses the ECKeyJWK to encrypt requests to Yubico. Or it\'s `sig` (signature) during activation, when Okta uses the ECKeyJWK to verify the responses from Yubico.
    */
  'use': ECKeyJWKUseEnum;
  /**
    * The public x coordinate for the elliptic curve point
    */
  'x': string;
  /**
    * The public y coordinate for the elliptic curve point
    */
  'y': string;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
export declare type ECKeyJWKCrvEnum = 'P-384';
export declare type ECKeyJWKKtyEnum = 'EC';
export declare type ECKeyJWKUseEnum = 'enc' | 'sig';
