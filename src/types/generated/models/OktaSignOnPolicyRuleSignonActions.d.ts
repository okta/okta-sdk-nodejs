/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { OktaSignOnPolicyFactorPromptMode } from './../models/OktaSignOnPolicyFactorPromptMode';
import { OktaSignOnPolicyRuleSignonPrimaryFactor } from './../models/OktaSignOnPolicyRuleSignonPrimaryFactor';
import { OktaSignOnPolicyRuleSignonSessionActions } from './../models/OktaSignOnPolicyRuleSignonSessionActions';
/**
* Specifies settings for the policy rule
*/
export declare class OktaSignOnPolicyRuleSignonActions {
  /**
    * Indicates if a user is allowed to sign in
    */
  'access'?: OktaSignOnPolicyRuleSignonActionsAccessEnum;
  /**
    * Interval of time that must elapse before the user is challenged for MFA, if the factor prompt mode is set to `SESSION`  > **Note:** Required only if `requireFactor` is `true`.
    */
  'factorLifetime'?: number;
  'factorPromptMode'?: OktaSignOnPolicyFactorPromptMode;
  'primaryFactor'?: OktaSignOnPolicyRuleSignonPrimaryFactor;
  /**
    * Indicates if Okta should automatically remember the device
    */
  'rememberDeviceByDefault'?: boolean;
  /**
    * Indicates if multifactor authentication is required
    */
  'requireFactor'?: boolean;
  'session'?: OktaSignOnPolicyRuleSignonSessionActions;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
export declare type OktaSignOnPolicyRuleSignonActionsAccessEnum = 'ALLOW' | 'DENY';
