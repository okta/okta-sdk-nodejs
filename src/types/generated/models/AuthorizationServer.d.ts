/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AuthServerLinks } from './../models/AuthServerLinks';
import { AuthorizationServerCredentials } from './../models/AuthorizationServerCredentials';
import { LifecycleStatus } from './../models/LifecycleStatus';
export declare class AuthorizationServer {
  /**
    * The recipients that the tokens are intended for. This becomes the `aud` claim in an access token. Okta currently supports only one audience.
    */
  'audiences'?: Array<string>;
  'created'?: Date;
  'credentials'?: AuthorizationServerCredentials;
  /**
    * The description of the custom authorization server
    */
  'description'?: string;
  /**
    * The ID of the custom authorization server
    */
  'id'?: string;
  /**
    * The complete URL for the custom authorization server. This becomes the `iss` claim in an access token.
    */
  'issuer'?: string;
  /**
    * Indicates which value is specified in the issuer of the tokens that a custom authorization server returns: the Okta org domain URL or a custom domain URL.  `issuerMode` is visible if you have a custom URL domain configured or the Dynamic Issuer Mode feature enabled. If you have a custom URL domain configured, you can set a custom domain URL in a custom authorization server, and this property is returned in the appropriate responses.  When set to `ORG_URL`, then in responses, `issuer` is the Okta org domain URL: `https://${yourOktaDomain}`.  When set to `CUSTOM_URL`, then in responses, `issuer` is the custom domain URL configured in the administration user interface.  When set to `DYNAMIC`, then in responses, `issuer` is the custom domain URL if the OAuth 2.0 request was sent to the custom domain, or is the Okta org\'s domain URL if the OAuth 2.0 request was sent to the original Okta org domain.  After you configure a custom URL domain, all new custom authorization servers use `CUSTOM_URL` by default. If the Dynamic Issuer Mode feature is enabled, then all new custom authorization servers use `DYNAMIC` by default. All existing custom authorization servers continue to use the original value until they\'re changed using the Admin Console or the API. This way, existing integrations with the client and resource server continue to work after the feature is enabled.
    */
  'issuerMode'?: string;
  'lastUpdated'?: Date;
  /**
    * The name of the custom authorization server
    */
  'name'?: string;
  'status'?: LifecycleStatus;
  '_links'?: AuthServerLinks;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
