/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ChildOrgLicensing } from './../models/ChildOrgLicensing';
import { OrgCreationAdmin } from './../models/OrgCreationAdmin';
export declare class ChildOrg {
  'admin': OrgCreationAdmin;
  /**
    * Timestamp when the org was created
    */
  'created'?: Date;
  /**
    * Edition for the org. `SKU` is the only supported value.
    */
  'edition': ChildOrgEditionEnum;
  /**
    * The edition ID for the org. If provided, this supersedes the `edition` property. > **Internal use:** This property is for internal use only and not available to customers.
    */
  'editionId'?: string;
  /**
    * Timestamp when the org expires > **Internal use:** This property is only valid when `editionId=3` (`FreeTrialEdition`).
    */
  'expiresAt'?: Date | null;
  /**
    * Org ID
    */
  'id'?: string;
  /**
    * Timestamp when the org was last updated
    */
  'lastUpdated'?: Date;
  'licensing'?: ChildOrgLicensing;
  /**
    * Unique name of the org. This name appears in the HTML `<title>` tag of the new org sign-in page. Only less than 4-width UTF-8 encoded characters are allowed.
    */
  'name': string;
  /**
    * Settings associated with the created org
    */
  'settings'?: {
        [key: string]: any;
    };
    /**
    * Status of the org. `ACTIVE` is returned after the org is created.
    */
  'status'?: ChildOrgStatusEnum;
  /**
    * Subdomain of the org. Must be unique and include no spaces.
    */
  'subdomain': string;
  /**
    * API token associated with the child org super admin account. Use this API token to provision resources (such as policies, apps, and groups) on the newly created child org. This token is revoked if the super admin account is deactivated. > **Note:** If this API token expires, sign in to the Admin Console as the super admin user and create a new API token. See [Create an API token](https://developer.okta.com/docs/guides/create-an-api-token/).
    */
  'token'?: string;
  /**
    * Type of returned `token`. See [Okta API tokens](https://developer.okta.com/docs/guides/create-an-api-token/main/#okta-api-tokens).
    */
  'tokenType'?: ChildOrgTokenTypeEnum;
  /**
    * Default website for the org
    */
  'website'?: string;
  /**
    * Specifies available link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification
    */
  '_links'?: {
        [key: string]: any;
    };
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
export declare type ChildOrgEditionEnum = 'SKU';
export declare type ChildOrgStatusEnum = 'ACTIVE';
export declare type ChildOrgTokenTypeEnum = 'SSWS';
