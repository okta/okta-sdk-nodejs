/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { GrantOrTokenStatus } from './../models/GrantOrTokenStatus';
import { OAuth2Actor } from './../models/OAuth2Actor';
import { OAuth2ScopeConsentGrantEmbedded } from './../models/OAuth2ScopeConsentGrantEmbedded';
import { OAuth2ScopeConsentGrantLinks } from './../models/OAuth2ScopeConsentGrantLinks';
import { OAuth2ScopeConsentGrantSource } from './../models/OAuth2ScopeConsentGrantSource';
/**
* Grant object that represents an app consent scope grant
*/
export declare class OAuth2ScopeConsentGrant {
  /**
    * Client ID of the app integration
    */
  'clientId'?: string;
  /**
    * Timestamp when the object was created
    */
  'created'?: Date;
  'createdBy'?: OAuth2Actor;
  /**
    * ID of the Grant object
    */
  'id'?: string;
  /**
    * The issuer of your org authorization server. This is typically your Okta domain.
    */
  'issuer': string;
  /**
    * Timestamp when the object was last updated
    */
  'lastUpdated'?: Date;
  /**
    * The name of the [Okta scope](https://developer.okta.com/docs/api/oauth2/#oauth-20-scopes) for which consent is granted
    */
  'scopeId': string;
  'source'?: OAuth2ScopeConsentGrantSource;
  'status'?: GrantOrTokenStatus;
  /**
    * User ID that granted consent (if `source` is `END_USER`)
    */
  'userId'?: string;
  '_embedded'?: OAuth2ScopeConsentGrantEmbedded;
  '_links'?: OAuth2ScopeConsentGrantLinks;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
