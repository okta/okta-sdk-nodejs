/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { IdentityProviderApplicationUserLinks } from './../models/IdentityProviderApplicationUserLinks';
export declare class IdentityProviderApplicationUser {
  /**
    * Timestamp when the object was created
    */
  'created'?: Date;
  /**
    * Unique IdP-specific identifier for the user
    */
  'externalId'?: string;
  /**
    * Unique key of the user
    */
  'id'?: string;
  /**
    * Timestamp when the object was last updated
    */
  'lastUpdated'?: Date;
  /**
    * IdP-specific profile for the user.   IdP user profiles are IdP-specific but may be customized by the Profile Editor in the Admin Console.  > **Note:** Okta variable names have reserved characters that may conflict with the name of an IdP assertion attribute. You can use the **External name** to define the attribute name as defined in an IdP assertion such as a SAML attribute name.
    */
  'profile'?: {
        [key: string]: any;
    };
    /**
    * Embedded resources related to the IdP user
    */
  '_embedded'?: {
        [key: string]: any;
    };
  '_links'?: IdentityProviderApplicationUserLinks;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
