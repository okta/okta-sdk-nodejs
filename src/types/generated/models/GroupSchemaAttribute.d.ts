/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { GroupSchemaAttributeEnumInner } from './../models/GroupSchemaAttributeEnumInner';
import { UserSchemaAttributeEnum } from './../models/UserSchemaAttributeEnum';
import { UserSchemaAttributeFormat } from './../models/UserSchemaAttributeFormat';
import { UserSchemaAttributeItems } from './../models/UserSchemaAttributeItems';
import { UserSchemaAttributeMaster } from './../models/UserSchemaAttributeMaster';
import { UserSchemaAttributeMutabilityString } from './../models/UserSchemaAttributeMutabilityString';
import { UserSchemaAttributePermission } from './../models/UserSchemaAttributePermission';
import { UserSchemaAttributeScope } from './../models/UserSchemaAttributeScope';
import { UserSchemaAttributeType } from './../models/UserSchemaAttributeType';
export declare class GroupSchemaAttribute {
  /**
    * Description of the property
    */
  'description'?: string;
  /**
    * Enumerated value of the property.  The value of the property is limited to one of the values specified in the enum definition. The list of values for the enum must consist of unique elements.
    */
  '_enum'?: Array<GroupSchemaAttributeEnumInner> | null;
  /**
    * Name of the property as it exists in an external application
    */
  'externalName'?: string;
  /**
    * Namespace from the external application
    */
  'externalNamespace'?: string;
  /**
    * Identifies the type of data represented by the string
    */
  'format'?: UserSchemaAttributeFormat;
  'items'?: UserSchemaAttributeItems;
  /**
    * Identifies where the property is mastered
    */
  'master'?: UserSchemaAttributeMaster | null;
  /**
    * Maximum character length of a string property
    */
  'maxLength'?: number | null;
  /**
    * Minimum character length of a string property
    */
  'minLength'?: number | null;
  /**
    * Defines the mutability of the property
    */
  'mutability'?: UserSchemaAttributeMutabilityString;
  /**
    * Non-empty array of valid JSON schemas.  The `oneOf` key is only supported in conjunction with `enum` and provides a mechanism to return a display name for the `enum` value.<br> Each schema has the following format:  ``` {   \"const\": \"enumValue\",   \"title\": \"display name\" } ```  When `enum` is used in conjunction with `oneOf`, you must keep the set of enumerated values and their order.<br> For example:  ``` \"enum\": [\"S\",\"M\",\"L\",\"XL\"], \"oneOf\": [     {\"const\": \"S\", \"title\": \"Small\"},     {\"const\": \"M\", \"title\": \"Medium\"},     {\"const\": \"L\", \"title\": \"Large\"},     {\"const\": \"XL\", \"title\": \"Extra Large\"}   ] ```
    */
  'oneOf'?: Array<UserSchemaAttributeEnum> | null;
  /**
    * Access control permissions for the property
    */
  'permissions'?: Array<UserSchemaAttributePermission> | null;
  /**
    * Determines whether the property is required
    */
  'required'?: boolean | null;
  /**
    * Determines whether a group attribute can be set at the individual or group level
    */
  'scope'?: UserSchemaAttributeScope;
  /**
    * User-defined display name for the property
    */
  'title'?: string;
  /**
    * Type of property
    */
  'type'?: UserSchemaAttributeType;
  /**
    * Determines whether property values must be unique
    */
  'unique'?: boolean | null;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
