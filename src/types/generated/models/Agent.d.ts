/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AgentType } from './../models/AgentType';
import { AgentUpdateInstanceStatus } from './../models/AgentUpdateInstanceStatus';
import { LinksSelf } from './../models/LinksSelf';
import { OperationalStatus } from './../models/OperationalStatus';
/**
* Agent details
*/
export declare class Agent {
  /**
    * Unique identifier for the agent that\'s generated during installation
    */
  'id'?: string;
  /**
    * Determines if an agent is hidden from the Admin Console
    */
  'isHidden'?: boolean;
  /**
    * Determines if the agent is on the latest generally available version
    */
  'isLatestGAedVersion'?: boolean;
  /**
    * Timestamp when the agent last connected to Okta
    */
  'lastConnection'?: Date;
  /**
    * Agent name
    */
  'name'?: string;
  'operationalStatus'?: OperationalStatus;
  /**
    * Pool ID
    */
  'poolId'?: string;
  'type'?: AgentType;
  /**
    * Status message of the agent
    */
  'updateMessage'?: string;
  'updateStatus'?: AgentUpdateInstanceStatus;
  /**
    * Agent version number
    */
  'version'?: string;
  '_links'?: LinksSelf;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
