/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { LinksSelf } from './../models/LinksSelf';
export declare class AuthorizationServerJsonWebKey {
  /**
    * The algorithm used with the Key. Valid value: `RS256`
    */
  'alg'?: string;
  /**
    * RSA key value (public exponent) for Key binding
    */
  'e'?: string;
  /**
    * Unique identifier for the key
    */
  'kid'?: string;
  /**
    * Cryptographic algorithm family for the certificate\'s keypair. Valid value: `RSA`
    */
  'kty'?: string;
  /**
    * RSA modulus value that is used by both the public and private keys and provides a link between them
    */
  'n'?: string;
  /**
    * An `ACTIVE` Key is used to sign tokens issued by the authorization server. Supported values: `ACTIVE`, `NEXT`, or `EXPIRED`<br> A `NEXT` Key is the next Key that the authorization server uses to sign tokens when Keys are rotated. The `NEXT` Key might not be listed if it hasn\'t been generated. An `EXPIRED` Key is the previous Key that the authorization server used to sign tokens. The `EXPIRED` Key might not be listed if no Key has expired or the expired Key was deleted.
    */
  'status'?: string;
  /**
    * Acceptable use of the key. Valid value: `sig`
    */
  'use'?: string;
  '_links'?: LinksSelf;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
