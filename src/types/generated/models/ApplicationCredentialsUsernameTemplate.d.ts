/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
* The template used to generate the username when the app is assigned through a group or directly to a user
*/
export declare class ApplicationCredentialsUsernameTemplate {
  /**
    * Determines if the username is pushed to the app on updates for CUSTOM `type`
    */
  'pushStatus'?: ApplicationCredentialsUsernameTemplatePushStatusEnum;
  /**
    * Mapping expression used to generate usernames.  The following are supported mapping expressions that are used with the `BUILT_IN` template type:  | Name                            | Template Expression                            | | ------------------------------- | ---------------------------------------------- | | AD Employee ID                  | `${source.employeeID}`                         | | AD SAM Account Name             | `${source.samAccountName}`                     | | AD SAM Account Name (lowercase) | `${fn:toLowerCase(source.samAccountName)}`     | | AD User Principal Name          | `${source.userName}`                           | | AD User Principal Name prefix   | `${fn:substringBefore(source.userName, \"@\")}`  | | Email                           | `${source.email}`                              | | Email (lowercase)               | `${fn:toLowerCase(source.email)}`              | | Email prefix                    | `${fn:substringBefore(source.email, \"@\")}`     | | LDAP UID + custom suffix        | `${source.userName}${instance.userSuffix}`     | | Okta username                   | `${source.login}`                              | | Okta username prefix            | `${fn:substringBefore(source.login, \"@\")}`     |
    */
  'template'?: string;
  /**
    * Type of mapping expression. Empty string is allowed.
    */
  'type'?: ApplicationCredentialsUsernameTemplateTypeEnum;
  /**
    * An optional suffix appended to usernames for `BUILT_IN` mapping expressions
    */
  'userSuffix'?: string;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
export declare type ApplicationCredentialsUsernameTemplatePushStatusEnum = 'PUSH' | 'DONT_PUSH' | 'NOT_CONFIGURED';
export declare type ApplicationCredentialsUsernameTemplateTypeEnum = 'NONE' | 'BUILT_IN' | 'CUSTOM';
