/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { WellKnownSSFMetadataSpecUrn } from './../models/WellKnownSSFMetadataSpecUrn';
/**
* Metadata about Okta as a transmitter and relevant information for configuration.
*/
export declare class WellKnownSSFMetadata {
  /**
    * An array of JSON objects that specify the authorization scheme properties supported by the transmitter
    */
  'authorization_schemes'?: Array<WellKnownSSFMetadataSpecUrn>;
  /**
    * The URL of the SSF Stream configuration endpoint
    */
  'configuration_endpoint'?: string;
  /**
    * A string that indicates the default behavior of newly created streams
    */
  'default_subjects'?: WellKnownSSFMetadataDefaultSubjectsEnum;
  /**
    * An array of supported SET delivery methods
    */
  'delivery_methods_supported'?: Array<string>;
  /**
    * The issuer used in Security Event Tokens. This value is set as `iss` in the claim.
    */
  'issuer'?: string;
  /**
    * The URL of the JSON Web Key Set (JWKS) that contains the signing keys for validating the signatures of Security Event Tokens (SETs)
    */
  'jwks_uri'?: string;
  /**
    * The version identifying the implementer\'s draft or final specification implemented by the transmitter
    */
  'spec_version'?: string;
  /**
    * The URL of the SSF Stream verification endpoint
    */
  'verification_endpoint'?: string;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
export declare type WellKnownSSFMetadataDefaultSubjectsEnum = 'ALL' | 'NONE';
