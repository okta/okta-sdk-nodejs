/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { LinksSelf } from './../models/LinksSelf';
import { UserSchemaAttributeEnum } from './../models/UserSchemaAttributeEnum';
export declare class LogStreamSchema {
  /**
    * JSON schema version identifier
    */
  'schema'?: string;
  /**
    * A collection of error messages for individual properties in the schema. Okta implements a subset of [ajv-errors](https://github.com/ajv-validator/ajv-errors).
    */
  'errorMessage'?: any;
  /**
    * URI of log stream schema
    */
  'id'?: string;
  /**
    * Non-empty array of valid JSON schemas.  Okta only supports `oneOf` for specifying display names for an `enum`. Each schema has the following format:  ``` {   \"const\": \"enumValue\",   \"title\": \"display name\" } ```
    */
  'oneOf'?: Array<UserSchemaAttributeEnum> | null;
  /**
    * For `string` log stream schema property type, specifies the regular expression used to validate the property
    */
  'pattern'?: string;
  /**
    * log stream schema properties object
    */
  'properties'?: any;
  /**
    * Required properties for this log stream schema object
    */
  'required'?: Array<string>;
  /**
    * Name of the log streaming integration
    */
  'title'?: string;
  /**
    * Type of log stream schema property
    */
  'type'?: string;
  '_links'?: LinksSelf;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
