/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { CustomAttributeValue } from '../../custom-attributes';
/**
* Specifies the default and custom profile properties for a user.  The default user profile is based on the [System for Cross-domain Identity Management: Core Schema](https://datatracker.ietf.org/doc/html/rfc7643).  The only permitted customizations of the default profile are to update permissions, change whether the `firstName` and `lastName` properties are nullable, and specify a [pattern](https://developer.okta.com/docs/reference/api/schemas/#login-pattern-validation) for `login`. You can use the Profile Editor in the Admin Console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) to make schema modifications.  You can extend user profiles with custom properties. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin Console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) to manage schema extensions.  Custom attributes can contain HTML tags. It\'s the client\'s responsibility to escape or encode this data before displaying it. Use [best-practices](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html) to prevent cross-site scripting.
*/
export declare class UserProfile {
  /**
    * The city or locality of the user\'s address (`locality`)
    */
  'city'?: string | null;
  /**
    * Name of the cost center assigned to a user
    */
  'costCenter'?: string | null;
  /**
    * The country name component of the user\'s address (`country`). For validation, see [ISO 3166-1 alpha 2 \"short\" code format](https://datatracker.ietf.org/doc/html/draft-ietf-scim-core-schema-22#ref-ISO3166).
    */
  'countryCode'?: string | null;
  /**
    * Name of the user\'s department
    */
  'department'?: string;
  /**
    * Name of the user suitable for display to end users
    */
  'displayName'?: string | null;
  /**
    * Name of the user\'s division
    */
  'division'?: string | null;
  /**
    * The primary email address of the user. For validation, see [RFC 5322 Section 3.2.3](https://datatracker.ietf.org/doc/html/rfc5322#section-3.2.3).
    */
  'email'?: string;
  /**
    * The organization or company assigned unique identifier for the user
    */
  'employeeNumber'?: string;
  /**
    * Given name of the user (`givenName`)
    */
  'firstName'?: string | null;
  /**
    * Honorific prefix(es) of the user, or title in most Western languages
    */
  'honorificPrefix'?: string | null;
  /**
    * Honorific suffix(es) of the user
    */
  'honorificSuffix'?: string | null;
  /**
    * The family name of the user (`familyName`)
    */
  'lastName'?: string | null;
  /**
    * The user\'s default location for purposes of localizing items such as currency, date time format, numerical representations, and so on. A locale value is a concatenation of the ISO 639-1 two-letter language code, an underscore, and the ISO 3166-1 two-letter country code. For example, en_US specifies the language English and country US. This value is `en_US` by default.
    */
  'locale'?: string;
  /**
    * The unique identifier for the user (`username`). For validation, see [Login pattern validation](https://developer.okta.com/docs/reference/api/schemas/#login-pattern-validation).  Every user within your Okta org must have a unique identifier for a login. This constraint applies to all users you import from other systems or applications such as Active Directory. Your organization is the top-level namespace to mix and match logins from all your connected applications or directories. Careful consideration of naming conventions for your login identifier will make it easier to onboard new applications in the future.  Logins are not considered unique if they differ only in case and/or diacritical marks. If one of your users has a login of Isaac.Brock@example.com, there cannot be another user whose login is isaac.brock@example.com, nor isáàc.bröck@example.com.  Okta has a default ambiguous name resolution policy for usernames that include @-signs. (By default, usernames must be formatted as email addresses and thus always include @-signs. You can remove that restriction using either the Admin Console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/Schema/). Users can sign in with their non-qualified short name (for example: isaac.brock with username isaac.brock@example.com) as long as the short name is still unique within the organization. maxLength: 100
    */
  'login'?: string;
  /**
    * The `displayName` of the user\'s manager
    */
  'manager'?: string | null;
  /**
    * The `id` of the user\'s manager
    */
  'managerId'?: string | null;
  /**
    * The middle name of the user
    */
  'middleName'?: string | null;
  /**
    * The mobile phone number of the user
    */
  'mobilePhone'?: string | null;
  /**
    * The casual way to address the user in real life
    */
  'nickName'?: string | null;
  /**
    * Name of the the user\'s organization
    */
  'organization'?: string | null;
  /**
    * Mailing address component of the user\'s address
    */
  'postalAddress'?: string | null;
  /**
    * The user\'s preferred written or spoken language. For validation, see [RFC 7231 Section 5.3.5](https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.5).
    */
  'preferredLanguage'?: string | null;
  /**
    * The primary phone number of the user such as a home number
    */
  'primaryPhone'?: string | null;
  /**
    * The URL of the user\'s online profile. For example, a web page. See [URL](https://datatracker.ietf.org/doc/html/rfc1808).
    */
  'profileUrl'?: string | null;
  /**
    * The secondary email address of the user typically used for account recovery. For validation, see [RFC 5322 Section 3.2.3](https://datatracker.ietf.org/doc/html/rfc5322#section-3.2.3).
    */
  'secondEmail'?: string | null;
  /**
    * The state or region component of the user\'s address (`region`)
    */
  'state'?: string | null;
  /**
    * The full street address component of the user\'s address
    */
  'streetAddress'?: string | null;
  /**
    * The user\'s time zone
    */
  'timezone'?: string | null;
  /**
    * The user\'s title, such as Vice President
    */
  'title'?: string | null;
  /**
    * The property used to describe the organization-to-user relationship, such as employee or contractor
    */
  'userType'?: string | null;
  /**
    * The ZIP code or postal code component of the user\'s address (`postalCode`)
    */
  'zipCode'?: string | null;
    [key: string]: CustomAttributeValue | CustomAttributeValue[] | undefined;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
    static readonly isExtensible = true;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
    constructor();
}
