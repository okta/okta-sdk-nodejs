/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { PrincipalType } from './../models/PrincipalType';
/**
*
*/
export declare class PrincipalRateLimitEntity {
  /**
    * The Okta user ID of the user who created the principle rate limit entity
    */
  'createdBy'?: string;
  /**
    * The date and time the principle rate limit entity was created
    */
  'createdDate'?: Date;
  /**
    * The default percentage of a given concurrency limit threshold that the owning principal can consume
    */
  'defaultConcurrencyPercentage'?: number;
  /**
    * The default percentage of a given rate limit threshold that the owning principal can consume
    */
  'defaultPercentage'?: number;
  /**
    * The unique identifier of the principle rate limit entity
    */
  'id'?: string;
  /**
    * The date and time the principle rate limit entity was last updated
    */
  'lastUpdate'?: Date;
  /**
    * The Okta user ID of the user who last updated the principle rate limit entity
    */
  'lastUpdatedBy'?: string;
  /**
    * The unique identifier of the Okta org
    */
  'orgId'?: string;
  /**
    * The unique identifier of the principal. This is the ID of the API token or OAuth 2.0 app.
    */
  'principalId': string;
  'principalType': PrincipalType;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
