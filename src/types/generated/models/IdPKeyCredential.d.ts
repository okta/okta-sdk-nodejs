/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { X5c } from './../models/X5c';
/**
* A [JSON Web Key](https://tools.ietf.org/html/rfc7517) for a signature or encryption credential for an IdP
*/
export declare class IdPKeyCredential {
  /**
    * Timestamp when the object was created
    */
  'created'?: Date;
  /**
    * The exponent value for the RSA public key
    */
  'e'?: string;
  /**
    * Timestamp when the object expires
    */
  'expiresAt'?: Date;
  /**
    * Unique identifier for the key
    */
  'kid'?: string;
  /**
    * Identifies the cryptographic algorithm family used with the key
    */
  'kty'?: string;
  /**
    * Timestamp when the object was last updated
    */
  'lastUpdated'?: Date;
  /**
    * The modulus value for the RSA public key
    */
  'n'?: string;
  /**
    * Intended use of the public key
    */
  'use'?: string;
  'x5c'?: X5c;
  /**
    * Base64url-encoded SHA-256 thumbprint of the DER encoding of an X.509 certificate
    */
  'x5tS256'?: string;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
