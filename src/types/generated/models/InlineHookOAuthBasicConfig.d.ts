/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { InlineHookChannelConfigHeaders } from './../models/InlineHookChannelConfigHeaders';
export declare class InlineHookOAuthBasicConfig {
  'authType'?: string;
  /**
    * A publicly exposed string provided by the service that\'s used to identify the OAuth app and build authorization URLs
    */
  'clientId'?: string;
  /**
    * Include the scopes that allow you to perform the actions on the hook endpoint that you want to access
    */
  'scope'?: string;
  /**
    * The URI where inline hooks can exchange an authorization code for access and refresh tokens
    */
  'tokenUrl'?: string;
  /**
    * An optional list of key/value pairs for headers that you can send with the request to the external service
    */
  'headers'?: Array<InlineHookChannelConfigHeaders>;
  /**
    * The method of the Okta inline hook request
    */
  'method'?: string;
  /**
    * The external service endpoint that executes the inline hook handler. It must begin with `https://` and be reachable by Okta. No white space is allowed in the URI.
    */
  'uri'?: string;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
