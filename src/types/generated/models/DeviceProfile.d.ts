/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 4.0.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { DevicePlatform } from './../models/DevicePlatform';
export declare class DeviceProfile {
  /**
    * Display name of the device
    */
  'displayName': string;
  /**
    * International Mobile Equipment Identity of the device
    */
  'imei'?: string;
  /**
    * Name of the manufacturer of the device
    */
  'manufacturer'?: string;
  /**
    * Mobile equipment identifier of the device
    */
  'meid'?: string;
  /**
    * Model of the device
    */
  'model'?: string;
  /**
    * Version of the device OS
    */
  'osVersion'?: string;
  'platform': DevicePlatform;
  /**
    * Indicates if the device is registered at Okta
    */
  'registered': boolean;
  /**
    * Indicates if the device constains a secure hardware functionality
    */
  'secureHardwarePresent'?: boolean;
  /**
    * Serial number of the device
    */
  'serialNumber'?: string;
  /**
    * Windows Security identifier of the device
    */
  'sid'?: string;
  /**
    * Windows Trsted Platform Module hash value
    */
  'tpmPublicKeyHash'?: string;
  /**
    * macOS Unique Device identifier of the device
    */
  'udid'?: string;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
