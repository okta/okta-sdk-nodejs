/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { CodeChallengeMethod } from './../models/CodeChallengeMethod';
import { EndpointAuthMethod } from './../models/EndpointAuthMethod';
import { GrantType } from './../models/GrantType';
import { ResponseMode } from './../models/ResponseMode';
import { ResponseTypesSupported } from './../models/ResponseTypesSupported';
import { SigningAlgorithm } from './../models/SigningAlgorithm';
import { SubjectType } from './../models/SubjectType';
import { TokenDeliveryMode } from './../models/TokenDeliveryMode';
export declare class OAuthMetadata {
  /**
    * URL of the authorization server\'s authorization endpoint.
    */
  'authorization_endpoint'?: string;
  /**
    * A list of signing algorithms that this authorization server supports for signed requests.
    */
  'backchannel_authentication_request_signing_alg_values_supported'?: Array<SigningAlgorithm>;
  /**
    * The delivery modes that this authorization server supports for Client-Initiated Backchannel Authentication.
    */
  'backchannel_token_delivery_modes_supported'?: Array<TokenDeliveryMode>;
  /**
    * A list of the claims supported by this authorization server.
    */
  'claims_supported'?: Array<string>;
  /**
    * A list of PKCE code challenge methods supported by this authorization server.
    */
  'code_challenge_methods_supported'?: Array<CodeChallengeMethod>;
  'device_authorization_endpoint'?: string;
  /**
    * A list of signing algorithms supported by this authorization server for Demonstrating Proof-of-Possession (DPoP) JWTs.
    */
  'dpop_signing_alg_values_supported'?: Array<OAuthMetadataDpopSigningAlgValuesSupportedEnum>;
  /**
    * URL of the authorization server\'s logout endpoint.
    */
  'end_session_endpoint'?: string;
  /**
    * A list of the grant type values that this authorization server supports.
    */
  'grant_types_supported'?: Array<GrantType>;
  /**
    * URL of the authorization server\'s introspection endpoint.
    */
  'introspection_endpoint'?: string;
  /**
    * A list of client authentication methods supported by this introspection endpoint.
    */
  'introspection_endpoint_auth_methods_supported'?: Array<EndpointAuthMethod>;
  /**
    * The authorization server\'s issuer identifier. In the context of this document, this is your authorization server\'s base URL. This becomes the `iss` claim in an access token.
    */
  'issuer'?: string;
  /**
    * URL of the authorization server\'s JSON Web Key Set document.
    */
  'jwks_uri'?: string;
  'pushed_authorization_request_endpoint'?: string;
  /**
    * URL of the authorization server\'s JSON Web Key Set document.
    */
  'registration_endpoint'?: string;
  /**
    * A list of signing algorithms that this authorization server supports for signed requests.
    */
  'request_object_signing_alg_values_supported'?: Array<SigningAlgorithm>;
  /**
    * Indicates if Request Parameters are supported by this authorization server.
    */
  'request_parameter_supported'?: boolean;
  /**
    * A list of the `response_mode` values that this authorization server supports. More information here.
    */
  'response_modes_supported'?: Array<ResponseMode>;
  /**
    * A list of the `response_type` values that this authorization server supports. Can be a combination of `code`, `token`, and `id_token`.
    */
  'response_types_supported'?: Array<ResponseTypesSupported>;
  /**
    * URL of the authorization server\'s revocation endpoint.
    */
  'revocation_endpoint'?: string;
  /**
    * A list of client authentication methods supported by this revocation endpoint.
    */
  'revocation_endpoint_auth_methods_supported'?: Array<EndpointAuthMethod>;
  /**
    * A list of the scope values that this authorization server supports.
    */
  'scopes_supported'?: Array<string>;
  /**
    * A list of the Subject Identifier types that this authorization server supports. Valid types include `pairwise` and `public`, but only `public` is currently supported. See the [Subject Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes) section in the OpenID Connect specification.
    */
  'subject_types_supported'?: Array<SubjectType>;
  /**
    * URL of the authorization server\'s token endpoint.
    */
  'token_endpoint'?: string;
  /**
    * A list of client authentication methods supported by this token endpoint.
    */
  'token_endpoint_auth_methods_supported'?: Array<EndpointAuthMethod>;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
export declare type OAuthMetadataDpopSigningAlgValuesSupportedEnum = 'ES256' | 'ES384' | 'ES512' | 'RS256' | 'RS384' | 'RS512';
