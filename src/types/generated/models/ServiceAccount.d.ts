/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ServiceAccountStatus } from './../models/ServiceAccountStatus';
import { ServiceAccountStatusDetail } from './../models/ServiceAccountStatusDetail';
import { ServiceAccountType } from './../models/ServiceAccountType';
export declare class ServiceAccount {
  'accountType': ServiceAccountType;
  /**
    * Timestamp when the service account was created
    */
  'created'?: Date;
  /**
    * The description of the service account
    */
  'description'?: string;
  /**
    * The UUID of the service account
    */
  'id'?: string;
  /**
    * Timestamp when the service account was last updated
    */
  'lastUpdated'?: Date;
  /**
    * The user-defined name for the service account
    */
  'name': string;
  /**
    * A list of IDs of the Okta groups that own the service account
    */
  'ownerGroupIds'?: Array<string>;
  /**
    * A list of IDs of the Okta users that own the service account
    */
  'ownerUserIds'?: Array<string>;
  'status'?: ServiceAccountStatus;
  'statusDetail'?: ServiceAccountStatusDetail;
  static readonly discriminator: string | undefined;
  static readonly mapping: {
        [index: string]: string;
    } | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
