/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
* Org2Org app instance properties
*/
export declare class Org2OrgApplicationSettingsApplication {
  /**
    * The Assertion Consumer Service (ACS) URL of the source org (for `SAML_2_0` sign-on mode)
    */
  'acsUrl'?: string;
  /**
    * The entity ID of the SP (for `SAML_2_0` sign-on mode)
    */
  'audRestriction'?: string;
  /**
    * The base URL of the target Okta org (for `SAML_2_0` sign-on mode)
    */
  'baseUrl': string;
  /**
    * Used to track and manage the state of the app\'s creation or the provisioning process between two Okta orgs
    */
  'creationState'?: string;
  /**
    * Indicates that you don\'t want to use an email address as the username
    */
  'preferUsernameOverEmail'?: boolean;
  /**
    * An API token from the target org that\'s used to secure the connection between the orgs
    */
  'token'?: string;
  /**
    * Encrypted token to enhance security
    */
  'tokenEncrypted'?: string;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
