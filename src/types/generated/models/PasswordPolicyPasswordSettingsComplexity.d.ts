/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { PasswordDictionary } from './../models/PasswordDictionary';
/**
* Complexity settings
*/
export declare class PasswordPolicyPasswordSettingsComplexity {
  'dictionary'?: PasswordDictionary;
  /**
    * The User profile attributes whose values must be excluded from the password: currently only supports `firstName` and `lastName`
    */
  'excludeAttributes'?: Array<string>;
  /**
    * Indicates if the Username must be excluded from the password
    */
  'excludeUsername'?: boolean;
  /**
    * Minimum password length
    */
  'minLength'?: number;
  /**
    * Indicates if a password must contain at least one lower case letter: `0` indicates no, `1` indicates yes
    */
  'minLowerCase'?: number;
  /**
    * Indicates if a password must contain at least one number: `0` indicates no, `1` indicates yes
    */
  'minNumber'?: number;
  /**
    * Indicates if a password must contain at least one symbol (For example: !@#$%^&*): `0` indicates no, `1` indicates yes
    */
  'minSymbol'?: number;
  /**
    * Indicates if a password must contain at least one upper case letter: `0` indicates no, `1` indicates yes
    */
  'minUpperCase'?: number;
  /**
    * Use an [Expression Language](https://developer.okta.com/docs/reference/okta-expression-language-in-identity-engine/) expression to block a word from being used in a password. You can only block one word per expression. Use the `OR` operator to connect multiple expressions to block multiple words.
    */
  'oelStatement'?: string;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
