/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { LogDiskEncryptionType } from './../models/LogDiskEncryptionType';
import { LogScreenLockType } from './../models/LogScreenLockType';
/**
* The entity that describes a device enrolled with passwordless authentication using Okta Verify.
*/
export declare class LogDevice {
  /**
    * The integration platform or software used with the device
    */
  'device_integrator'?: any;
  'disk_encryption_type'?: LogDiskEncryptionType;
  /**
    * ID of the device
    */
  'id'?: string;
  /**
    * If the device has removed software restrictions
    */
  'jailbreak'?: boolean;
  /**
    * Indicates if the device is configured for device management and is registered with Okta
    */
  'managed'?: boolean;
  'name'?: string;
  'os_platform'?: string;
  'os_version'?: string;
  /**
    * Indicates if the device is registered with an Okta org and is bound to an Okta Verify instance on the device
    */
  'registered'?: boolean;
  'screen_lock_type'?: LogScreenLockType;
  /**
    * The availability of hardware security on the device
    */
  'secure_hardware_present'?: boolean;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
