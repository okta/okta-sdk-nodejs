/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { PreRegistrationInlineHook } from './../models/PreRegistrationInlineHook';
import { ProfileEnrollmentPolicyRuleActivationRequirement } from './../models/ProfileEnrollmentPolicyRuleActivationRequirement';
import { ProfileEnrollmentPolicyRuleProfileAttribute } from './../models/ProfileEnrollmentPolicyRuleProfileAttribute';
export declare class ProfileEnrollmentPolicyRuleAction {
  /**
    * Indicates if the user profile is granted access  > **Note:** You can\'t set the `access` property to `DENY` after you create the policy
    */
  'access'?: ProfileEnrollmentPolicyRuleActionAccessEnum;
  'activationRequirements'?: ProfileEnrollmentPolicyRuleActivationRequirement;
  /**
    * A list of attributes to identify an end user. Can be used across Okta sign-in, unlock, and recovery flows.
    */
  'allowedIdentifiers'?: Array<string>;
  /**
    * Additional authenticator fields that can be used on the first page of user registration. Valid values only includes `\'password\'`.
    */
  'enrollAuthenticatorTypes'?: Array<string>;
  /**
    * (Optional) The `id` of at most one registration inline hook
    */
  'preRegistrationInlineHooks'?: Array<PreRegistrationInlineHook>;
  /**
    * A list of attributes to prompt the user for during registration or progressive profiling. Where defined on the user schema, these attributes are persisted in the user profile. You can also add non-schema attributes, which aren\'t persisted to the user\'s profile, but are included in requests to the registration inline hook. A maximum of 10 profile properties is supported.
    */
  'profileAttributes'?: Array<ProfileEnrollmentPolicyRuleProfileAttribute>;
  /**
    * Progressive profile enrollment helps evaluate the user profile policy at every user login. Users can be prompted to provide input for newly required attributes.
    */
  'progressiveProfilingAction'?: ProfileEnrollmentPolicyRuleActionProgressiveProfilingActionEnum;
  /**
    * (Optional, max 1 entry) The `id` of a group that this user should be added to
    */
  'targetGroupIds'?: Array<string>;
  /**
    * Value created by the backend. If present, all policy updates must include this attribute/value.
    */
  'uiSchemaId'?: string;
  /**
    * Which action should be taken if this user is new
    */
  'unknownUserAction'?: ProfileEnrollmentPolicyRuleActionUnknownUserActionEnum;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
export declare type ProfileEnrollmentPolicyRuleActionAccessEnum = 'ALLOW' | 'DENY';
export declare type ProfileEnrollmentPolicyRuleActionProgressiveProfilingActionEnum = 'ENABLED' | 'DISABLED';
export declare type ProfileEnrollmentPolicyRuleActionUnknownUserActionEnum = 'DENY' | 'REGISTER';
