/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
* The `securityContext` object provides security information that is directly related to the evaluation of the event\'s IP reputation. IP reputation is a trustworthiness rating that evaluates how likely a sender is to be malicious and is based on the sender\'s IP address. As the name implies, the `securityContext` object is useful for security applications-flagging and inspecting suspicious events.
*/
export declare class LogSecurityContext {
  /**
    * The [Autonomous system](https://docs.telemetry.mozilla.org/datasets/other/asn_aggregates/reference) number that\'s associated with the autonomous system the event request was sourced to
    */
  'asNumber'?: number;
  /**
    * The organization that is associated with the autonomous system that the event request is sourced to
    */
  'asOrg'?: string;
  /**
    * The domain name that\'s associated with the IP address of the inbound event request
    */
  'domain'?: string;
  /**
    * The Internet service provider that\'s used to send the event\'s request
    */
  'isp'?: string;
  /**
    * Specifies whether an event\'s request is from a known proxy
    */
  'isProxy'?: boolean;
  static readonly discriminator: string | undefined;
  static readonly attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
        format: string;
    }>;
  static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
        format: string;
    }[];
  constructor();
}
