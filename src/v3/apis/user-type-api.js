'use strict';
/* tslint:disable */
/* eslint-disable */
/**
 * Copyright (c) 2022-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 * Okta API
 * Allows customers to easily access the Okta API
 *
 * OpenAPI spec version: 2.10.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserTypeApi = exports.UserTypeApiFactory = exports.UserTypeApiFp = exports.UserTypeApiRequestParamCreator = void 0;
// Some imports not used depending on template conditions
// @ts-ignore
const base_1 = require("../base");
const oauth_1 = require("../../oauth");
const http_1 = require("../../http");
const config_loader_1 = require("../../config-loader");
const default_request_executor_1 = require("../../default-request-executor");
const collection_1 = require("../../collection");
const os = require('os');
const packageJson = require('../../../package.json');
const DEFAULT_USER_AGENT = `${packageJson.name}/${packageJson.version} node/${process.versions.node} ${os.platform()}/${os.release()}`;
const repoUrl = 'https://github.com/okta/okta-sdk-nodejs';
/**
 * UserTypeApi - request parameter creator
 * @export
 */
const UserTypeApiRequestParamCreator = function (configuration) {
    const configLoader = new config_loader_1.ConfigLoader();
    const clientConfig = Object.assign({}, configuration);
    configLoader.applyDefaults();
    configLoader.apply({
        client: clientConfig || {}
    });
    const parsedConfig = configLoader.config;
    const requestExecutor = clientConfig.requestExecutor || new default_request_executor_1.DefaultRequestExecutor();
    const errors = [];
    if (!parsedConfig.client.orgUrl) {
        errors.push('Okta Org URL not provided');
    }
    if (!parsedConfig.client.token && parsedConfig.client.authorizationMode !== 'PrivateKey') {
        errors.push('Okta API token not provided');
    }
    if (parsedConfig.client.authorizationMode === 'PrivateKey') {
        if (!parsedConfig.client.clientId) {
            errors.push('Okta Client ID not provided');
        }
        if (!parsedConfig.client.scopes) {
            errors.push('Scopes not provided');
        }
        if (!parsedConfig.client.privateKey) {
            errors.push('Private Key not provided');
        }
    }
    else if (parsedConfig.client.authorizationMode !== 'SSWS') {
        errors.push('Unknown Authorization Mode');
    }
    if (errors.length) {
        throw new Error(`Found ${errors.length} errors:\n${errors.join('\n')}\nSee ${repoUrl} for usage.`);
    }
    const authorizationMode = parsedConfig.client.authorizationMode;
    const baseUrl = parsedConfig.client.orgUrl.replace(/\/$/, '');
    const apiToken = parsedConfig.client.token;
    let clientId;
    let scopes;
    let privateKey;
    let oauth;
    if (authorizationMode === 'PrivateKey') {
        clientId = parsedConfig.client.clientId;
        scopes = parsedConfig.client.scopes.split(' ');
        privateKey = parsedConfig.client.privateKey;
        oauth = new oauth_1.OAuth(this);
    }
    const http = new http_1.Http({
        cacheStore: clientConfig.cacheStore,
        cacheMiddleware: clientConfig.cacheMiddleware,
        defaultCacheMiddlewareResponseBufferSize: clientConfig.defaultCacheMiddlewareResponseBufferSize,
        requestExecutor: requestExecutor,
        oauth: oauth
    });
    if (authorizationMode === 'SSWS') {
        http.defaultHeaders.Authorization = `SSWS ${apiToken}`;
    }
    http.defaultHeaders['User-Agent'] = parsedConfig.client.userAgent ? parsedConfig.client.userAgent + ' ' + DEFAULT_USER_AGENT : DEFAULT_USER_AGENT;
    return {
        http,
        /**
          * Fetches all User Types in your org
          * @summary List User Types
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        listUserTypes: (options = {}) => {
            const localVarPath = `/api/v1/meta/types/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_token required
            if (configuration && configuration.apiToken) {
                const localVarApiKeyValue = typeof configuration.apiToken === 'function'
                    ? configuration.apiToken("Authorization")
                    : configuration.apiToken;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["okta.apps.read", "okta.apps.manage", "okta.authenticators.read", "okta.authenticators.manage", "okta.authorizationServers.read", "okta.authorizationServers.manage", "okta.brands.read", "okta.brands.manage", "okta.captchas.manage", "okta.captchas.read", "okta.domains.read", "okta.domains.manage", "okta.eventHooks.read", "okta.eventHooks.manage", "okta.groups.read", "okta.groups.manage", "okta.roles.read", "okta.roles.manage", "okta.idps.read", "okta.idps.manage", "okta.users.manage", "okta.inlineHooks.read", "okta.inlineHooks.manage", "okta.logs.read", "okta.profileMappings.read", "okta.profileMappings.manage", "okta.schemas.read", "okta.schemas.manage", "okta.linkedObjects.read", "okta.linkedObjects.manage", "okta.userTypes.read", "okta.userTypes.manage", "okta.orgs.read", "okta.orgs.manage", "okta.policies.read", "okta.policies.manage", "okta.sessions.read", "okta.sessions.manage", "okta.templates.read", "okta.templates.manage", "okta.trustedOrigins.read", "okta.trustedOrigins.manage", "okta.users.read.self", "okta.users.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
          * Creates a new User Type. A default User Type is automatically created along with your org, and you may add another 9 User Types for a maximum of 10.
          * @summary Create User Type
          * @param {UserType} body
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        createUserType: (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling createUserType.');
            }
            const localVarPath = `/api/v1/meta/types/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_token required
            if (configuration && configuration.apiToken) {
                const localVarApiKeyValue = typeof configuration.apiToken === 'function'
                    ? configuration.apiToken("Authorization")
                    : configuration.apiToken;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["okta.apps.read", "okta.apps.manage", "okta.authenticators.read", "okta.authenticators.manage", "okta.authorizationServers.read", "okta.authorizationServers.manage", "okta.brands.read", "okta.brands.manage", "okta.captchas.manage", "okta.captchas.read", "okta.domains.read", "okta.domains.manage", "okta.eventHooks.read", "okta.eventHooks.manage", "okta.groups.read", "okta.groups.manage", "okta.roles.read", "okta.roles.manage", "okta.idps.read", "okta.idps.manage", "okta.users.manage", "okta.inlineHooks.read", "okta.inlineHooks.manage", "okta.logs.read", "okta.profileMappings.read", "okta.profileMappings.manage", "okta.schemas.read", "okta.schemas.manage", "okta.linkedObjects.read", "okta.linkedObjects.manage", "okta.userTypes.read", "okta.userTypes.manage", "okta.orgs.read", "okta.orgs.manage", "okta.policies.read", "okta.policies.manage", "okta.sessions.read", "okta.sessions.manage", "okta.templates.read", "okta.templates.manage", "okta.trustedOrigins.read", "okta.trustedOrigins.manage", "okta.users.read.self", "okta.users.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
          * Deletes a User Type permanently. This operation is not permitted for the default type, nor for any User Type that has existing users
          * @summary Delete User Type
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        deleteUserType: (typeId, options = {}) => {
            // verify required parameter 'typeId' is not null or undefined
            if (typeId === null || typeId === undefined) {
                throw new base_1.RequiredError('typeId', 'Required parameter typeId was null or undefined when calling deleteUserType.');
            }
            const localVarPath = `/api/v1/meta/types/user/{typeId}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_token required
            if (configuration && configuration.apiToken) {
                const localVarApiKeyValue = typeof configuration.apiToken === 'function'
                    ? configuration.apiToken("Authorization")
                    : configuration.apiToken;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["okta.apps.read", "okta.apps.manage", "okta.authenticators.read", "okta.authenticators.manage", "okta.authorizationServers.read", "okta.authorizationServers.manage", "okta.brands.read", "okta.brands.manage", "okta.captchas.manage", "okta.captchas.read", "okta.domains.read", "okta.domains.manage", "okta.eventHooks.read", "okta.eventHooks.manage", "okta.groups.read", "okta.groups.manage", "okta.roles.read", "okta.roles.manage", "okta.idps.read", "okta.idps.manage", "okta.users.manage", "okta.inlineHooks.read", "okta.inlineHooks.manage", "okta.logs.read", "okta.profileMappings.read", "okta.profileMappings.manage", "okta.schemas.read", "okta.schemas.manage", "okta.linkedObjects.read", "okta.linkedObjects.manage", "okta.userTypes.read", "okta.userTypes.manage", "okta.orgs.read", "okta.orgs.manage", "okta.policies.read", "okta.policies.manage", "okta.sessions.read", "okta.sessions.manage", "okta.templates.read", "okta.templates.manage", "okta.trustedOrigins.read", "okta.trustedOrigins.manage", "okta.users.read.self", "okta.users.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
          * Fetches a User Type by ID. The special identifier `default` may be used to fetch the default User Type.
          * @summary Get User Type
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        getUserType: (typeId, options = {}) => {
            // verify required parameter 'typeId' is not null or undefined
            if (typeId === null || typeId === undefined) {
                throw new base_1.RequiredError('typeId', 'Required parameter typeId was null or undefined when calling getUserType.');
            }
            const localVarPath = `/api/v1/meta/types/user/{typeId}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_token required
            if (configuration && configuration.apiToken) {
                const localVarApiKeyValue = typeof configuration.apiToken === 'function'
                    ? configuration.apiToken("Authorization")
                    : configuration.apiToken;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["okta.apps.read", "okta.apps.manage", "okta.authenticators.read", "okta.authenticators.manage", "okta.authorizationServers.read", "okta.authorizationServers.manage", "okta.brands.read", "okta.brands.manage", "okta.captchas.manage", "okta.captchas.read", "okta.domains.read", "okta.domains.manage", "okta.eventHooks.read", "okta.eventHooks.manage", "okta.groups.read", "okta.groups.manage", "okta.roles.read", "okta.roles.manage", "okta.idps.read", "okta.idps.manage", "okta.users.manage", "okta.inlineHooks.read", "okta.inlineHooks.manage", "okta.logs.read", "okta.profileMappings.read", "okta.profileMappings.manage", "okta.schemas.read", "okta.schemas.manage", "okta.linkedObjects.read", "okta.linkedObjects.manage", "okta.userTypes.read", "okta.userTypes.manage", "okta.orgs.read", "okta.orgs.manage", "okta.policies.read", "okta.policies.manage", "okta.sessions.read", "okta.sessions.manage", "okta.templates.read", "okta.templates.manage", "okta.trustedOrigins.read", "okta.trustedOrigins.manage", "okta.users.read.self", "okta.users.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
          * Updates an existing User Type
          * @summary Update User Type
          * @param {UserType} body
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        updateUserType: (body, typeId, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling updateUserType.');
            }
            // verify required parameter 'typeId' is not null or undefined
            if (typeId === null || typeId === undefined) {
                throw new base_1.RequiredError('typeId', 'Required parameter typeId was null or undefined when calling updateUserType.');
            }
            const localVarPath = `/api/v1/meta/types/user/{typeId}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_token required
            if (configuration && configuration.apiToken) {
                const localVarApiKeyValue = typeof configuration.apiToken === 'function'
                    ? configuration.apiToken("Authorization")
                    : configuration.apiToken;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["okta.apps.read", "okta.apps.manage", "okta.authenticators.read", "okta.authenticators.manage", "okta.authorizationServers.read", "okta.authorizationServers.manage", "okta.brands.read", "okta.brands.manage", "okta.captchas.manage", "okta.captchas.read", "okta.domains.read", "okta.domains.manage", "okta.eventHooks.read", "okta.eventHooks.manage", "okta.groups.read", "okta.groups.manage", "okta.roles.read", "okta.roles.manage", "okta.idps.read", "okta.idps.manage", "okta.users.manage", "okta.inlineHooks.read", "okta.inlineHooks.manage", "okta.logs.read", "okta.profileMappings.read", "okta.profileMappings.manage", "okta.schemas.read", "okta.schemas.manage", "okta.linkedObjects.read", "okta.linkedObjects.manage", "okta.userTypes.read", "okta.userTypes.manage", "okta.orgs.read", "okta.orgs.manage", "okta.policies.read", "okta.policies.manage", "okta.sessions.read", "okta.sessions.manage", "okta.templates.read", "okta.templates.manage", "okta.trustedOrigins.read", "okta.trustedOrigins.manage", "okta.users.read.self", "okta.users.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
          * Replace an existing User Type
          * @summary Replace User Type
          * @param {UserType} body
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        replaceUserType: (body, typeId, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling replaceUserType.');
            }
            // verify required parameter 'typeId' is not null or undefined
            if (typeId === null || typeId === undefined) {
                throw new base_1.RequiredError('typeId', 'Required parameter typeId was null or undefined when calling replaceUserType.');
            }
            const localVarPath = `/api/v1/meta/types/user/{typeId}`
                .replace(`{${"typeId"}}`, encodeURIComponent(String(typeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_token required
            if (configuration && configuration.apiToken) {
                const localVarApiKeyValue = typeof configuration.apiToken === 'function'
                    ? configuration.apiToken("Authorization")
                    : configuration.apiToken;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }
            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("oauth2", ["okta.apps.read", "okta.apps.manage", "okta.authenticators.read", "okta.authenticators.manage", "okta.authorizationServers.read", "okta.authorizationServers.manage", "okta.brands.read", "okta.brands.manage", "okta.captchas.manage", "okta.captchas.read", "okta.domains.read", "okta.domains.manage", "okta.eventHooks.read", "okta.eventHooks.manage", "okta.groups.read", "okta.groups.manage", "okta.roles.read", "okta.roles.manage", "okta.idps.read", "okta.idps.manage", "okta.users.manage", "okta.inlineHooks.read", "okta.inlineHooks.manage", "okta.logs.read", "okta.profileMappings.read", "okta.profileMappings.manage", "okta.schemas.read", "okta.schemas.manage", "okta.linkedObjects.read", "okta.linkedObjects.manage", "okta.userTypes.read", "okta.userTypes.manage", "okta.orgs.read", "okta.orgs.manage", "okta.policies.read", "okta.policies.manage", "okta.sessions.read", "okta.sessions.manage", "okta.templates.read", "okta.templates.manage", "okta.trustedOrigins.read", "okta.trustedOrigins.manage", "okta.users.read.self", "okta.users.read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    };
};
exports.UserTypeApiRequestParamCreator = UserTypeApiRequestParamCreator;
/**
 * UserTypeApi - functional programming interface
 * @export
 */
const UserTypeApiFp = function (configuration) {
    return {
        /**
          * Fetches all User Types in your org
          * @summary List User Types
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        listUserTypes(options) {
            const api = exports.UserTypeApiRequestParamCreator(configuration);
            const localVarRequestArgs = api.listUserTypes(options);
            return (http = api.http, basePath = configuration.basePath || configuration.orgUrl) => {
                const requestArgs = { ...localVarRequestArgs.options, url: basePath + localVarRequestArgs.url };
                return new collection_1.Collection({ http }, `${requestArgs.url}`);
            };
        },
        /**
          * Creates a new User Type. A default User Type is automatically created along with your org, and you may add another 9 User Types for a maximum of 10.
          * @summary Create User Type
          * @param {UserType} body
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        createUserType(body, options) {
            const api = exports.UserTypeApiRequestParamCreator(configuration);
            const localVarRequestArgs = api.createUserType(body, options);
            return (http = api.http, basePath = configuration.basePath || configuration.orgUrl) => {
                const requestArgs = { ...localVarRequestArgs.options, url: basePath + localVarRequestArgs.url };
                return http.http(requestArgs.url, requestArgs).then(res => res.json().then((data) => data));
            };
        },
        /**
          * Deletes a User Type permanently. This operation is not permitted for the default type, nor for any User Type that has existing users
          * @summary Delete User Type
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        deleteUserType(typeId, options) {
            const api = exports.UserTypeApiRequestParamCreator(configuration);
            const localVarRequestArgs = api.deleteUserType(typeId, options);
            return (http = api.http, basePath = configuration.basePath || configuration.orgUrl) => {
                const requestArgs = { ...localVarRequestArgs.options, url: basePath + localVarRequestArgs.url };
                return http.http(requestArgs.url, requestArgs).then(resp => {
                    return new Promise((resolve, reject) => {
                        resp.body.on('data', () => { });
                        resp.body.on('error', (err) => reject(err));
                        resp.body.on('end', () => resolve({}));
                    });
                });
            };
        },
        /**
          * Fetches a User Type by ID. The special identifier `default` may be used to fetch the default User Type.
          * @summary Get User Type
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        getUserType(typeId, options) {
            const api = exports.UserTypeApiRequestParamCreator(configuration);
            const localVarRequestArgs = api.getUserType(typeId, options);
            return (http = api.http, basePath = configuration.basePath || configuration.orgUrl) => {
                const requestArgs = { ...localVarRequestArgs.options, url: basePath + localVarRequestArgs.url };
                return http.http(requestArgs.url, requestArgs).then(res => res.json().then((data) => data));
            };
        },
        /**
          * Updates an existing User Type
          * @summary Update User Type
          * @param {UserType} body
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        updateUserType(body, typeId, options) {
            const api = exports.UserTypeApiRequestParamCreator(configuration);
            const localVarRequestArgs = api.updateUserType(body, typeId, options);
            return (http = api.http, basePath = configuration.basePath || configuration.orgUrl) => {
                const requestArgs = { ...localVarRequestArgs.options, url: basePath + localVarRequestArgs.url };
                return http.http(requestArgs.url, requestArgs).then(res => res.json().then((data) => data));
            };
        },
        /**
          * Replace an existing User Type
          * @summary Replace User Type
          * @param {UserType} body
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        replaceUserType(body, typeId, options) {
            const api = exports.UserTypeApiRequestParamCreator(configuration);
            const localVarRequestArgs = api.replaceUserType(body, typeId, options);
            return (http = api.http, basePath = configuration.basePath || configuration.orgUrl) => {
                const requestArgs = { ...localVarRequestArgs.options, url: basePath + localVarRequestArgs.url };
                return http.http(requestArgs.url, requestArgs).then(res => res.json().then((data) => data));
            };
        },
    };
};
exports.UserTypeApiFp = UserTypeApiFp;
/**
 * UserTypeApi - factory interface
 * @export
 */
const UserTypeApiFactory = function (configuration, basePath, http) {
    return {
        /**
          * Fetches all User Types in your org
          * @summary List User Types
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        listUserTypes(options) {
            return exports.UserTypeApiFp(configuration).listUserTypes(options)(http, basePath);
        },
        /**
          * Creates a new User Type. A default User Type is automatically created along with your org, and you may add another 9 User Types for a maximum of 10.
          * @summary Create User Type
          * @param {UserType} body
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        createUserType(body, options) {
            return exports.UserTypeApiFp(configuration).createUserType(body, options)(http, basePath);
        },
        /**
          * Deletes a User Type permanently. This operation is not permitted for the default type, nor for any User Type that has existing users
          * @summary Delete User Type
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        deleteUserType(typeId, options) {
            return exports.UserTypeApiFp(configuration).deleteUserType(typeId, options)(http, basePath);
        },
        /**
          * Fetches a User Type by ID. The special identifier `default` may be used to fetch the default User Type.
          * @summary Get User Type
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        getUserType(typeId, options) {
            return exports.UserTypeApiFp(configuration).getUserType(typeId, options)(http, basePath);
        },
        /**
          * Updates an existing User Type
          * @summary Update User Type
          * @param {UserType} body
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        updateUserType(body, typeId, options) {
            return exports.UserTypeApiFp(configuration).updateUserType(body, typeId, options)(http, basePath);
        },
        /**
          * Replace an existing User Type
          * @summary Replace User Type
          * @param {UserType} body
          * @param {string} typeId
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
        replaceUserType(body, typeId, options) {
            return exports.UserTypeApiFp(configuration).replaceUserType(body, typeId, options)(http, basePath);
        },
    };
};
exports.UserTypeApiFactory = UserTypeApiFactory;
/**
 * UserTypeApi - object-oriented interface
 * @export
 * @class UserTypeApi
 * @extends {BaseAPI}
 */
class UserTypeApi extends base_1.BaseAPI {
    /**
      * Fetches all User Types in your org
      * @summary List User Types
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof UserTypeApi
      */
    listUserTypes(options) {
        return exports.UserTypeApiFp(this.configuration).listUserTypes(options)(this.httpClient, this.basePath);
    }
    /**
      * Creates a new User Type. A default User Type is automatically created along with your org, and you may add another 9 User Types for a maximum of 10.
      * @summary Create User Type
      * @param {UserType} body
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof UserTypeApi
      */
    createUserType(body, options) {
        return exports.UserTypeApiFp(this.configuration).createUserType(body, options)(this.httpClient, this.basePath);
    }
    /**
      * Deletes a User Type permanently. This operation is not permitted for the default type, nor for any User Type that has existing users
      * @summary Delete User Type
      * @param {string} typeId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof UserTypeApi
      */
    deleteUserType(typeId, options) {
        return exports.UserTypeApiFp(this.configuration).deleteUserType(typeId, options)(this.httpClient, this.basePath);
    }
    /**
      * Fetches a User Type by ID. The special identifier `default` may be used to fetch the default User Type.
      * @summary Get User Type
      * @param {string} typeId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof UserTypeApi
      */
    getUserType(typeId, options) {
        return exports.UserTypeApiFp(this.configuration).getUserType(typeId, options)(this.httpClient, this.basePath);
    }
    /**
      * Updates an existing User Type
      * @summary Update User Type
      * @param {UserType} body
      * @param {string} typeId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof UserTypeApi
      */
    updateUserType(body, typeId, options) {
        return exports.UserTypeApiFp(this.configuration).updateUserType(body, typeId, options)(this.httpClient, this.basePath);
    }
    /**
      * Replace an existing User Type
      * @summary Replace User Type
      * @param {UserType} body
      * @param {string} typeId
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof UserTypeApi
      */
    replaceUserType(body, typeId, options) {
        return exports.UserTypeApiFp(this.configuration).replaceUserType(body, typeId, options)(this.httpClient, this.basePath);
    }
}
exports.UserTypeApi = UserTypeApi;
