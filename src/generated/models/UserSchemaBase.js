/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


'use strict';
/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true });
exports.UserSchemaBase = void 0;
/**
* All Okta-defined profile properties are defined in a profile subschema with the resolution scope `#base`. You can\'t modify these properties, except to update permissions, to change the nullability of `firstName` and `lastName`, or to specify a pattern for `login`. They can\'t be removed.  The base user profile is based on the [System for Cross-domain Identity Management: Core Schema](https://tools.ietf.org/html/draft-ietf-scim-core-schema-22#section-4.1.1) and has the standard properties detailed below.
*/
class UserSchemaBase {
  constructor() {
  }
  static getAttributeTypeMap() {
    return UserSchemaBase.attributeTypeMap;
  }
}
exports.UserSchemaBase = UserSchemaBase;
UserSchemaBase.discriminator = undefined;
UserSchemaBase.attributeTypeMap = [
  {
    'name': 'id',
    'baseName': 'id',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'properties',
    'baseName': 'properties',
    'type': 'UserSchemaBaseProperties',
    'format': ''
  },
  {
    'name': 'required',
    'baseName': 'required',
    'type': 'Array<string>',
    'format': ''
  },
  {
    'name': 'type',
    'baseName': 'type',
    'type': 'string',
    'format': ''
  }
];
