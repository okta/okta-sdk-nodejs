/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


'use strict';
/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true });
exports.UserProfile = void 0;
/**
* Specifies the default and custom profile properties for a user.  The default user profile is based on the [System for Cross-domain Identity Management: Core Schema](https://datatracker.ietf.org/doc/html/rfc7643).  The only permitted customizations of the default profile are to update permissions, change whether the `firstName` and `lastName` properties are nullable, and specify a [pattern](https://developer.okta.com/docs/reference/api/schemas/#login-pattern-validation) for `login`. You can use the Profile Editor in the Admin Console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) to make schema modifications.  You can extend user profiles with custom properties. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin Console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) to manage schema extensions.  Custom attributes can contain HTML tags. It\'s the client\'s responsibility to escape or encode this data before displaying it. Use [best-practices](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html) to prevent cross-site scripting.
*/
class UserProfile {
  constructor() {
  }
  static getAttributeTypeMap() {
    return UserProfile.attributeTypeMap;
  }
}
exports.UserProfile = UserProfile;
UserProfile.discriminator = undefined;
UserProfile.attributeTypeMap = [
  {
    'name': 'city',
    'baseName': 'city',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'costCenter',
    'baseName': 'costCenter',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'countryCode',
    'baseName': 'countryCode',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'department',
    'baseName': 'department',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'displayName',
    'baseName': 'displayName',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'division',
    'baseName': 'division',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'email',
    'baseName': 'email',
    'type': 'string',
    'format': 'email'
  },
  {
    'name': 'employeeNumber',
    'baseName': 'employeeNumber',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'firstName',
    'baseName': 'firstName',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'honorificPrefix',
    'baseName': 'honorificPrefix',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'honorificSuffix',
    'baseName': 'honorificSuffix',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'lastName',
    'baseName': 'lastName',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'locale',
    'baseName': 'locale',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'login',
    'baseName': 'login',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'manager',
    'baseName': 'manager',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'managerId',
    'baseName': 'managerId',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'middleName',
    'baseName': 'middleName',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'mobilePhone',
    'baseName': 'mobilePhone',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'nickName',
    'baseName': 'nickName',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'organization',
    'baseName': 'organization',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'postalAddress',
    'baseName': 'postalAddress',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'preferredLanguage',
    'baseName': 'preferredLanguage',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'primaryPhone',
    'baseName': 'primaryPhone',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'profileUrl',
    'baseName': 'profileUrl',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'secondEmail',
    'baseName': 'secondEmail',
    'type': 'string',
    'format': 'email'
  },
  {
    'name': 'state',
    'baseName': 'state',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'streetAddress',
    'baseName': 'streetAddress',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'timezone',
    'baseName': 'timezone',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'title',
    'baseName': 'title',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'userType',
    'baseName': 'userType',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'zipCode',
    'baseName': 'zipCode',
    'type': 'string',
    'format': ''
  }
];
UserProfile.isExtensible = true;
