/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


'use strict';
/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true });
exports.LogAuthenticationContext = void 0;
/**
* All authentication relies on validating one or more credentials that prove the authenticity of the actor\'s identity. Credentials are sometimes provided by the actor, as is the case with passwords, and at other times provided by a third party, and validated by the authentication provider.  The authenticationContext contains metadata about how the actor is authenticated. For example, an authenticationContext for an event, where a user authenticates with Integrated Windows Authentication (IWA), looks like the following: ``` {     \"authenticationProvider\": \"ACTIVE_DIRECTORY\",     \"authenticationStep\": 0,     \"credentialProvider\": null,     \"credentialType\": \"IWA\",     \"externalSessionId\": \"102N1EKyPFERROGvK9wizMAPQ\",     \"interface\": null,     \"issuer\": null } ``` In this case, the user enters an IWA credential to authenticate against an Active Directory instance. All of the user\'s future-generated events in this sign-in session are going to share the same `externalSessionId`.  Among other operations, this response object can be used to scan for suspicious sign-in activity or perform analytics on user authentication habits (for example, how often authentication scheme X is used versus authentication scheme Y).
*/
class LogAuthenticationContext {
  constructor() {
  }
  static getAttributeTypeMap() {
    return LogAuthenticationContext.attributeTypeMap;
  }
}
exports.LogAuthenticationContext = LogAuthenticationContext;
LogAuthenticationContext.discriminator = undefined;
LogAuthenticationContext.attributeTypeMap = [
  {
    'name': 'authenticationProvider',
    'baseName': 'authenticationProvider',
    'type': 'LogAuthenticationProvider',
    'format': ''
  },
  {
    'name': 'authenticationStep',
    'baseName': 'authenticationStep',
    'type': 'number',
    'format': ''
  },
  {
    'name': 'credentialProvider',
    'baseName': 'credentialProvider',
    'type': 'LogCredentialProvider',
    'format': ''
  },
  {
    'name': 'credentialType',
    'baseName': 'credentialType',
    'type': 'LogCredentialType',
    'format': ''
  },
  {
    'name': 'externalSessionId',
    'baseName': 'externalSessionId',
    'type': 'string',
    'format': ''
  },
  {
    'name': '_interface',
    'baseName': 'interface',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'issuer',
    'baseName': 'issuer',
    'type': 'LogIssuer',
    'format': ''
  }
];
