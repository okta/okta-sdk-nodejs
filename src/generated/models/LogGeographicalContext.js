/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


'use strict';
/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true });
exports.LogGeographicalContext = void 0;
/**
* Geographical context describes a set of geographic coordinates. In addition to containing latitude and longitude data, the `GeographicalContext` object also contains address data of postal code-level granularity. Within the `Client` object, the geographical context refers to the physical location of the client when it sends the request that triggers this event. All `Transaction` events with `type` equal to `WEB` have a geographical context set. `Transaction` events with `type` equal to `JOB` don\'t have a geographical context set. The geographical context data can be missing if the geographical data for a request can\'t be resolved.
*/
class LogGeographicalContext {
  constructor() {
  }
  static getAttributeTypeMap() {
    return LogGeographicalContext.attributeTypeMap;
  }
}
exports.LogGeographicalContext = LogGeographicalContext;
LogGeographicalContext.discriminator = undefined;
LogGeographicalContext.attributeTypeMap = [
  {
    'name': 'city',
    'baseName': 'city',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'country',
    'baseName': 'country',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'geolocation',
    'baseName': 'geolocation',
    'type': 'LogGeolocation',
    'format': ''
  },
  {
    'name': 'postalCode',
    'baseName': 'postalCode',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'state',
    'baseName': 'state',
    'type': 'string',
    'format': ''
  }
];
