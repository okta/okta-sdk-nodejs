/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


'use strict';
/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true });
exports.PasswordCredential = void 0;
/**
* Specifies a password for a user.  When a user has a valid password, imported hashed password, or password hook, and a response object contains a password credential, then the password object is a bare object without the value property defined (for example, `password: {}`). This indicates that a password value exists. You can modify password policy requirements in the Admin Console by editing the Password authenticator:  **Security** > **Authenticators** > **Password** (or for Okta Classic orgs, use **Security** > **Authentication** > **Password**).  For information on defaults and configuring your password policies, see [Configure the password authenticator](https://help.okta.com/okta_help.htm?type=oie&id=ext-configure-password) in the help documentation.
*/
class PasswordCredential {
  constructor() {
  }
  static getAttributeTypeMap() {
    return PasswordCredential.attributeTypeMap;
  }
}
exports.PasswordCredential = PasswordCredential;
PasswordCredential.discriminator = undefined;
PasswordCredential.attributeTypeMap = [
  {
    'name': 'hash',
    'baseName': 'hash',
    'type': 'PasswordCredentialHash',
    'format': ''
  },
  {
    'name': 'hook',
    'baseName': 'hook',
    'type': 'PasswordCredentialHook',
    'format': ''
  },
  {
    'name': 'value',
    'baseName': 'value',
    'type': 'string',
    'format': 'password'
  }
];
