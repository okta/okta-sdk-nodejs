/*!
 * Copyright (c) 2017-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


'use strict';
/**
 * Okta Admin Management
 * Allows customers to easily access the Okta Management APIs
 *
 * OpenAPI spec version: 5.1.0
 * Contact: devex-public@okta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true });
exports.GroupProfile = void 0;
/**
* Specifies required and optional properties for a group. The `objectClass` of a group determines which additional properties are available.  You can extend group profiles with custom properties, but you must first add the properties to the group profile schema before you can reference them. Use the Profile Editor in the Admin Console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/Schema/)to manage schema extensions.  Custom properties can contain HTML tags. It is the client\'s responsibility to escape or encode this data before displaying it. Use [best-practices](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html) to prevent cross-site scripting.
*/
class GroupProfile {
  constructor() {
  }
  static getAttributeTypeMap() {
    return GroupProfile.attributeTypeMap;
  }
}
exports.GroupProfile = GroupProfile;
GroupProfile.discriminator = undefined;
GroupProfile.attributeTypeMap = [
  {
    'name': 'description',
    'baseName': 'description',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'name',
    'baseName': 'name',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'dn',
    'baseName': 'dn',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'externalId',
    'baseName': 'externalId',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'samAccountName',
    'baseName': 'samAccountName',
    'type': 'string',
    'format': ''
  },
  {
    'name': 'windowsDomainQualifiedName',
    'baseName': 'windowsDomainQualifiedName',
    'type': 'string',
    'format': ''
  }
];
