{{!-- The template file is not auto-generated - this banner is to be included into destination files --}}
/* THIS FILE IS AUTO-GENERATED - SEE CONTRIBUTOR DOCUMENTATION */


/**
 * Auto-Generated API client, implements the operations as defined in the OpenaAPI JSON spec
 *
 * @class GeneratedApiClient
 */
class GeneratedApiClient {

{{#each operations}}
  /**
   {{{jsdocBuilder this}}}
   */
  {{operationId}}({{operationArgumentBuilder this}}) {
    {{#each (getRequiredOperationParams this)}}
    if (!{{this}}) {
      return Promise.reject(new Error('OKTA API {{../operationId}} parameter {{this}} is required.'));
    }
    {{/each}}
  {{#if (isV3Api operationId)}}
  {{#if (useObjectParameters)}}
    const params = {};
    {{#each pathParams}}
    params.{{name}} = {{name}};
    {{/each}}
    {{#each (getBodyParams this)}}
    params.{{name}} = {{name}};
    {{/each}}
    {{#if queryParams.length}}
    if (queryParameters) {
    {{#each queryParams}}
      params.{{name}} = queryParameters.{{name}};
    {{/each}}
    }
    {{/if}}
    {{#if headerParams.length}}
    if (headerParameters) {
    {{#each headerParams}}
      params.{{name}} = headerParameters.{{name}};
    {{/each}}
    }
    {{/if}}
    return this.{{toCamelCase (v3ApiByOperationId operationId)}}.{{getV3MethodName operationId}}(params);
  {{else}}
    {{#if queryParams.length}}
    {{#each queryParams}}
    let {{name}};
    {{/each}}
    if (queryParameters) {
    {{#each queryParams}}
      {{name}} = queryParameters.{{name}};
    {{/each}}
    }
    {{/if}}
    {{#if headerParams.length}}
    {{#each headerParams}}
    let {{name}};
    {{/each}}
    if (headerParameters) {
    {{#each headerParams}}
      {{name}} = headerParameters.{{name}};
    {{/each}}
    }
    {{/if}}
    return this.{{toCamelCase (v3ApiByOperationId operationId)}}.{{getV3MethodName operationId}}({{operationArgumentBuilder this 'v3'}});
  {{/if}}
  {{else}}
    let url = `${this.baseUrl}{{replacePathParams path}}`;
    {{#if queryParams.length}}
    const queryString = qs.stringify(queryParameters || {});

    url += queryString ? ('?' + queryString) : '';
    {{/if}}

    {{#if isArray}}
    return new Collection(
      this.http,
      url,
      {{#if responseModelRequiresResolution}}
      new factories.{{responseModel}}(this),
      {{else}}
      new ModelFactory(models.{{responseModel}}, this),
      {{/if}}
      {{#if bodyModel}}
      {
        method: '{{method}}',
        body: JSON.stringify({{getBodyModelNameInCamelCase this}}),
        headers: {
          {{#if consumes}}'Content-Type': '{{consumes}}', {{/if}}{{#if produces}}'Accept': '{{produces}}',{{/if}}{{#if encoding}} 'Content-Transfer-Encoding': '{{encoding}}',{{/if}}
        }
      }
      {{/if}}
    );
    {{else}}
    const resources = {{{getAffectedResources path}}};
    {{#if (containsRestrictedProperties bodyModel)}}
    const payload = this._removeRestrictedModelProperties({{getBodyModelNameInCamelCase this}}, '{{getRestrictedProperties bodyModel}}'.split(','));
    {{/if}}

    const request = this.http.{{getHttpMethod this}}(
      url,
      {{#if (hasRequest this)}}
      {
        {{#if (hasHeaders this)}}
        headers: {
          {{#if formData.length}}{{else}}{{#if consumes}}'Content-Type': '{{consumes}}', {{/if}}{{/if}}{{#if produces}}'Accept': '{{produces}}',{{/if}}{{#if encoding}} 'Content-Transfer-Encoding': '{{encoding}}',{{/if}}
        },
        {{/if}}
        {{#if bodyModel}}
        body: {{#if (containsRestrictedProperties bodyModel)}}payload{{else}}{{getBodyModelNameInCamelCase this}}{{/if}}
        {{/if}}
      },
      {{else}}
      null,
      {{/if}}
      {{#if formData.length}}
      {{formData.[0].name}},
      {{/if}}
      { resources }
    ){{#if (shouldResolveJson this)}}.then(res => res.json()){{/if}};
    {{#if responseModel}}
    {{#if responseModelRequiresResolution}}
    return request.then(jsonRes => new factories.{{responseModel}}(this).createInstance(jsonRes));
    {{else}}
    return request.then(jsonRes => new models.{{responseModel}}(jsonRes, this));
    {{/if}}
    {{else}}
    return request;
    {{/if}}
    {{/if}}
  {{/if}}
  }

{{/each}}
  _removeRestrictedModelProperties(instance, restrictedProperties) {
    const allowedProperties = Object.keys(instance).filter(propertyName => !restrictedProperties.includes(propertyName));
    return allowedProperties.reduce((properties, propertyName) => ({
      ...properties,
      [propertyName]: instance[propertyName]
    }), Object.create(null));
  }
}

module.exports = GeneratedApiClient;
