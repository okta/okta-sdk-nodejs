{{>licenseInfo}}
{{#models}}
{{#model}}
{{#tsImports}}
import { {{classname}} } from './{{filename}}{{extensionForDeno}}';
{{/tsImports}}
import { HttpFile } from '../http/http{{extensionForDeno}}';
{{#vendorExtensions}}
{{#x-okta-extensible}}
import { CustomAttributeValue } from '../../custom-attributes{{extensionForDeno}}';
{{/x-okta-extensible}}
{{/vendorExtensions}}

{{#description}}
/**
* {{{.}}}
*/
{{/description}}
{{^isEnum}}
{{#oneOf}}
{{#-first}}{{>model/modelOneOf}}{{/-first}}
{{/oneOf}}
{{^oneOf}}
export class {{classname}} {{#parent}}extends {{{.}}} {{/parent}}{
{{#vars}}
{{#description}}
  /**
  * {{{.}}}
  */
{{/description}}
  '{{name}}'{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{#isNullable}} | null{{/isNullable}};
{{/vars}}

{{#vendorExtensions}}
{{#x-okta-extensible}}
  [key: string]: CustomAttributeValue | CustomAttributeValue[] | undefined;
{{/x-okta-extensible}}
{{/vendorExtensions}}

  {{#discriminator}}
  static readonly discriminator: string | undefined = '{{discriminatorName}}';
  {{/discriminator}}
  {{^discriminator}}
  static readonly discriminator: string | undefined = undefined;
  {{/discriminator}}
  {{#hasDiscriminatorWithNonEmptyMapping}}
  static {{#parent}}override {{/parent}}readonly mapping: {[index: string]: string} | undefined = {
  {{#discriminator.mappedModels}}
      "{{mappingName}}": "{{modelName}}",
  {{/discriminator.mappedModels}}
  };
  {{/hasDiscriminatorWithNonEmptyMapping}}
  {{^hasDiscriminatorWithNonEmptyMapping}}
  {{#comment}}
  {{! TODO: do we need/use this? }}
  static {{#parent}}override {{/parent}}readonly mapping: {[index: string]: string} | undefined = undefined;
  {{/comment}}
  {{/hasDiscriminatorWithNonEmptyMapping}}

  {{^isArray}}
  static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
    {{#vars}}
    {
      'name': '{{name}}',
      'baseName': '{{baseName}}',
      'type': '{{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}',
      'format': '{{dataFormat}}'
    }{{^-last}},
    {{/-last}}
    {{/vars}}
  ];

{{#vendorExtensions}}
{{#x-okta-extensible}}
  static readonly isExtensible = true;
{{/x-okta-extensible}}
{{/vendorExtensions}}

  static getAttributeTypeMap() {
    {{#parent}}
    return super.getAttributeTypeMap().concat({{classname}}.attributeTypeMap);
    {{/parent}}
    {{^parent}}
    return {{classname}}.attributeTypeMap;
    {{/parent}}
  }
  {{/isArray}}

  public constructor() {
    {{#parent}}
    super();
    {{/parent}}
    {{#allVars}}
    {{#discriminatorValue}}
    this.{{name}} = '{{discriminatorValue}}';
    {{/discriminatorValue}}
    {{/allVars}}
    {{#discriminatorName}}
    this.{{discriminatorName}} = '{{classname}}';
    {{/discriminatorName}}
  }
}

{{#hasEnums}}

{{#vars}}
{{#isEnum}}
export type {{classname}}{{enumName}} ={{#allowableValues}}{{#values}} '{{.}}' {{^-last}}|{{/-last}}{{/values}}{{/allowableValues}};
{{#comment}}
{{! new version of enums, see https://github.com/OpenAPITools/openapi-generator/blob/8d8e3ddf16f2e79c24faf50fb3436b8f545d852f/modules/openapi-generator/src/main/resources/typescript/model/model.mustache#L89 }}
export enum {{classname}}{{enumName}} {
    {{#allowableValues}}
    {{#enumVars}}
    {{name}} = {{{value}}}{{^-last}},{{/-last}}
    {{/enumVars}}
    {{/allowableValues}}
}
{{/comment}}
{{/isEnum}}
{{/vars}}

{{/hasEnums}}
{{/oneOf}}
{{/isEnum}}
{{#isEnum}}
export type {{classname}} ={{#allowableValues}}{{#values}} '{{.}}' {{^-last}}|{{/-last}}{{/values}}{{/allowableValues}};
{{#comment}}
{{! new version of enums, see https://github.com/OpenAPITools/openapi-generator/blob/8d8e3ddf16f2e79c24faf50fb3436b8f545d852f/modules/openapi-generator/src/main/resources/typescript/model/model.mustache#L89 }}
export enum {{classname}} {
    {{#allowableValues}}
    {{#enumVars}}
    {{name}} = {{{value}}}{{^-last}},{{/-last}}
    {{/enumVars}}
    {{/allowableValues}}
}
{{/comment}}
{{/isEnum}}
{{/model}}
{{/models}}