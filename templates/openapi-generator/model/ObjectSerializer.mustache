{{#models}}
{{#model}}
export * from './{{{ classFilename }}}{{extensionForDeno}}';
{{/model}}
{{/models}}

{{#models}}
{{#model}}
import { {{classname}}{{#oneOf}}{{#-first}}Class{{/-first}}{{/oneOf}}{{^oneOf}}{{#hasEnums}}{{#vars}}{{#isEnum}}, {{classname}}{{enumName}} {{/isEnum}} {{/vars}}{{/hasEnums}}{{/oneOf}} } from '{{{ importPath }}}{{importFileExtension}}';
{{/model}}
{{/models}}

/* tslint:disable:no-unused-variable */
let primitives = [
                    'string',
                    'boolean',
                    'double',
                    'integer',
                    'long',
                    'float',
                    'number',
                    'any'
                 ];

let enumsMap: Set<string> = new Set<string>([
  {{#models}}
      {{#model}}
          {{#isEnum}}
  '{{classname}}{{enumName}}',
          {{/isEnum}}
          {{#hasEnums}}
              {{#vars}}
                  {{#isEnum}}
  '{{classname}}{{enumName}}',
                  {{/isEnum}}
              {{/vars}}
          {{/hasEnums}}
      {{/model}}
  {{/models}}
]);

let typeMap: {[index: string]: any} = {
  {{#models}}
      {{#model}}
          {{^isEnum}}
  "{{classname}}": {{classname}}{{#oneOf}}{{#-first}}Class{{/-first}}{{/oneOf}},
          {{/isEnum}}
      {{/model}}
  {{/models}}
  // generated manually from spec
  // TODO: remove
  {{> model/typeMap}}
}

type MimeTypeDescriptor = {
    type: string;
    subtype: string;
    subtypeTokens: string[];
};

/**
 * Every mime-type consists of a type, subtype, and optional parameters.
 * The subtype can be composite, including information about the content format.
 * For example: `application/json-patch+json`, `application/merge-patch+json`.
 *
 * This helper transforms a string mime-type into an internal representation.
 * This simplifies the implementation of predicates that in turn define common rules for parsing or stringifying
 * the payload.
 */
const parseMimeType = (mimeType: string): MimeTypeDescriptor => {
    const [type = '', subtype = ''] = mimeType.split('/');
    return {
        type,
        subtype,
        subtypeTokens: subtype.split('+'),
    };
};

type MimeTypePredicate = (mimeType: string) => boolean;

// This factory creates a predicate function that checks a string mime-type against defined rules.
const mimeTypePredicateFactory = (predicate: (descriptor: MimeTypeDescriptor) => boolean): MimeTypePredicate => (mimeType) => predicate(parseMimeType(mimeType));

// Use this factory when you need to define a simple predicate based only on type and, if applicable, subtype.
const mimeTypeSimplePredicateFactory = (type: string, subtype?: string): MimeTypePredicate => mimeTypePredicateFactory((descriptor) => {
    if (descriptor.type !== type) return false;
    if (subtype != null && descriptor.subtype !== subtype) return false;
    return true;
});

// Creating a set of named predicates that will help us determine how to handle different mime-types
const isTextLikeMimeType = mimeTypeSimplePredicateFactory('text');
const isJsonMimeType = mimeTypeSimplePredicateFactory('application', 'json');
const isJsonLikeMimeType = mimeTypePredicateFactory((descriptor) => descriptor.type === 'application' && descriptor.subtypeTokens.some((item) => item === 'json'));
const isOctetStreamMimeType = mimeTypeSimplePredicateFactory('application', 'octet-stream');
const isFormUrlencodedMimeType = mimeTypeSimplePredicateFactory('application', 'x-www-form-urlencoded');

const isCertMediaType = (mediaType: string): boolean => {
  const certMediaTypes = [
    'application/x-x509-ca-cert',
    'application/pkix-cert',
    'application/x-pem-file'
  ];
  return certMediaTypes.includes(mediaType);
};

// Defining a list of mime-types in the order of prioritization for handling.
const supportedMimeTypePredicatesWithPriority: MimeTypePredicate[] = [
    isCertMediaType,
    isJsonMimeType,
    isJsonLikeMimeType,
    isTextLikeMimeType,
    isOctetStreamMimeType,
    isFormUrlencodedMimeType,
];

const nullableSuffix = " | null";
const optionalSuffix = " | undefined";
const arrayPrefix = "Array<";
const arraySuffix = ">";
const mapPrefix = "{ [key: string]: ";
const mapSuffix = "; }";

export class ObjectSerializer {
  public static findCorrectType(data: any, expectedType: string, discriminator?: string): any {
    if (data == undefined) {
      return expectedType;
    } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
      return expectedType;
    } else if (expectedType === 'Date') {
      return expectedType;
    } else {
      if (enumsMap.has(expectedType)) {
        return expectedType;
      }

      if (!typeMap[expectedType]) {
        return expectedType; // w/e we don't know the type
      }

      // Check the discriminator
      let discriminatorProperty = discriminator || typeMap[expectedType].discriminator;
      if (discriminatorProperty == null) {
        return expectedType; // the type does not have a discriminator. use it.
      } else {
        if (data[discriminatorProperty]) {
          var discriminatorType = data[discriminatorProperty];
          const mapping = typeMap[expectedType].mapping;
          const prefixedTypeDiscriminatorType = `__${expectedType}__${discriminatorType}`;
          const prefixedDiscriminatorType = `__${discriminatorType}`;
          const manuallyDiscriminatedType = typeMap[prefixedTypeDiscriminatorType] || typeMap[prefixedDiscriminatorType];
          if (mapping != undefined && mapping[discriminatorType]) {
              return mapping[discriminatorType]; // use the type given in the discriminator
          } else if (typeMap[discriminatorType]) {
              return discriminatorType;
          } else if (manuallyDiscriminatedType) {
            return manuallyDiscriminatedType.discriminator ? ObjectSerializer.findCorrectType(data, discriminatorType, manuallyDiscriminatedType.discriminator) : typeMap[prefixedTypeDiscriminatorType] ? prefixedTypeDiscriminatorType : prefixedDiscriminatorType ; // use the type given in the discriminator
          } else {
            return expectedType; // discriminator did not map to a type
          }
        } else {
          return expectedType; // discriminator was not present (or an empty string)
        }
      }
    }
  }

  public static serialize(data: any, type: string, format: string) {
      if (data == undefined) {
        return data;
      } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
        return data;
      } else if (type.endsWith(nullableSuffix)) {
          let subType: string = type.slice(0, -nullableSuffix.length); // Type | null => Type
          return ObjectSerializer.serialize(data, subType, format);
      } else if (type.endsWith(optionalSuffix)) {
          let subType: string = type.slice(0, -optionalSuffix.length); // Type | undefined => Type
          return ObjectSerializer.serialize(data, subType, format);
      } else if (type.startsWith(arrayPrefix)) {
          let subType: string = type.slice(arrayPrefix.length, -arraySuffix.length); // Array<Type> => Type
          let transformedData: any[] = [];
          for (let date of data) {
              transformedData.push(ObjectSerializer.serialize(date, subType, format));
          }
          return transformedData;
      } else if (type.startsWith(mapPrefix)) {
          let subType: string = type.slice(mapPrefix.length, -mapSuffix.length); // { [key: string]: Type; } => Type
          let transformedData: { [key: string]: any } = {};
          for (let key in data) {
              transformedData[key] = ObjectSerializer.serialize(
                  data[key],
                  subType,
                  format,
              );
          }
          return transformedData;
      } else if (type === 'Date') {
        if (format == 'date') {
          let month = data.getMonth()+1
          month = month < 10 ? '0' + month.toString() : month.toString()
          let day = data.getDate();
          day = day < 10 ? '0' + day.toString() : day.toString();

          return data.getFullYear() + '-' + month + '-' + day;
        } else {
          // format === 'date-time'
          return data.toISOString().replace(/\.\d{3}/, '');
        }
      } else if (type === 'HttpFile') {
        {{#platforms}}
        {{#node}}
        if (data.data) {
          data = data.data;
        }
        if (data instanceof Buffer) {
          return data.toString();
        } else {
          return data;
        }
        {{/node}}
        {{#browser}}
        // @ts-ignore
        if (data.text) {
          // TODO: serialize method should be async then
          // @ts-ignore
          return await data.text();
        } else {
          return data;
        }
        {{/browser}}
        {{/platforms}}
      } else {
        if (enumsMap.has(type)) {
          return data;
        }
        if (!typeMap[type]) { // in case we dont know the type
          return data;
        }

        // Get the actual type of this object
        type = this.findCorrectType(data, type);

        // get the map for the correct type.
        let attributeTypes = typeMap[type].getAttributeTypeMap();
        let instance: {[index: string]: any} = {};
        for (let index in attributeTypes) {
          let attributeType = attributeTypes[index];
          instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type, attributeType.format);
        }
        if (typeMap[type].isExtensible || !attributeTypes.length) {
          for (let key in data) {
            if (!attributeTypes.find(({name}: any) => name === key)) {
              instance[key] = ObjectSerializer.serialize(data[key], 'any', '');
            }
          }
        }
        return instance;
      }
  }

  public static deserialize(data: any, type: string, format: string) {
    // polymorphism may change the actual type.
    type = ObjectSerializer.findCorrectType(data, type);
    if (data == undefined) {
      return data;
    } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
      return data;
    } else if (type.endsWith(nullableSuffix)) {
        let subType: string = type.slice(0, -nullableSuffix.length); // Type | null => Type
        return ObjectSerializer.deserialize(data, subType, format);
    } else if (type.endsWith(optionalSuffix)) {
        let subType: string = type.slice(0, -optionalSuffix.length); // Type | undefined => Type
        return ObjectSerializer.deserialize(data, subType, format);
    } else if (type.startsWith(arrayPrefix)) {
        let subType: string = type.slice(arrayPrefix.length, -arraySuffix.length); // Array<Type> => Type
        let transformedData: any[] = [];
        for (let date of data) {
            transformedData.push(ObjectSerializer.deserialize(date, subType, format));
        }
        return transformedData;
    } else if (type.startsWith(mapPrefix)) {
        let subType: string = type.slice(mapPrefix.length, -mapSuffix.length); // { [key: string]: Type; } => Type
        let transformedData: { [key: string]: any } = {};
        for (let key in data) {
            transformedData[key] = ObjectSerializer.deserialize(
                data[key],
                subType,
                format,
            );
        }
        return transformedData;
    } else if (type === 'Date') {
        return new Date(data);
    } else {
      if (enumsMap.has(type)) {// is Enum
        return data;
      }

      if (!typeMap[type]) { // dont know the type
        return data;
      }
      let instance = new typeMap[type]();
      let attributeTypes = typeMap[type].getAttributeTypeMap();
      for (let index in attributeTypes) {
        let attributeType = attributeTypes[index];
        instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);
      }
      if (typeMap[type].isExtensible || !attributeTypes.length) {
        for (let key in data) {
          if (!attributeTypes.find(({baseName}: any) => baseName === key)) {
            instance[key] = ObjectSerializer.deserialize(data[key], 'any', '');
          }
        }
      }
      return instance;
    }
  }


  /**
    * Normalize media type
    *
    * We currently do not handle any media types attributes, i.e. anything
    * after a semicolon. All content is assumed to be UTF-8 compatible.
    */
  public static normalizeMediaType(mediaType: string | undefined): string | undefined {
    if (mediaType === undefined) {
      return undefined;
    }
    return (mediaType.split(";")[0] ?? '').trim().toLowerCase();
  }

  public static getPreferredMediaTypeForCert(body?: any): string | undefined {
    {{#platforms}}
    {{#node}}
    if (body.data) {
      body = body.data;
    }
    if (body instanceof Buffer) {
      body = body.toString();
    }
    {{/node}}
    {{#browser}}
    // @ts-ignore
    if (body.text) {
      // TODO: getPreferredMediaTypeForCert method should be async then
      // @ts-ignore
      body = await body.text();
    }
    {{/browser}}
    {{/platforms}}
    const isPem = typeof body === 'string' && body.indexOf('-----BEGIN') === 0;
    const isDer = typeof body === 'string' && body.charCodeAt(0) === 0x30;
    const isBase64 = typeof body === 'string' && !isPem && !isDer && /^[A-Za-z0-9+\/=\-_]+$/.test(body);
    if (isPem) {
      return 'application/x-pem-file';
    } else if (isDer || isBase64) {
      // Prefer base64-encoded over binary for DER
      return 'application/pkix-cert';
    }
    return undefined;
  }

  /**
    * From a list of possible media types and body, choose the one we can handle it best.
    *
    * The order of the given media types does not have any impact on the choice
    * made.
    */
  public static getPreferredMediaTypeAndEncoding(mediaTypes: Array<string>, body?: any): [string, string | undefined] {
    /** According to OAS 3 we should default to json */
    if (!mediaTypes || mediaTypes.length === 0) {
      return ['application/json', undefined];
    }

    const normalMediaTypes = mediaTypes.map(ObjectSerializer.normalizeMediaType);

    let selectedMediaType: string | undefined = undefined;
    for (const predicate of supportedMimeTypePredicatesWithPriority) {
        for (const mediaType of normalMediaTypes) {
            if (mediaType != null && predicate(mediaType)) {
                if (isCertMediaType(selectedMediaType)) {
                  selectedMediaType = ObjectSerializer.getPreferredMediaTypeForCert(body);
                } else {
                  selectedMediaType = mediaType;
                }
                if (selectedMediaType) {
                  break;
                }
            }
        }
        if (selectedMediaType) {
          break;
        }
    }

    let selectedEncoding: string | undefined = undefined;
    if (selectedMediaType === 'application/pkix-cert') {
      selectedEncoding = 'base64';
    }

    if (selectedMediaType === undefined) {
      throw new Error('None of the given media types are supported: ' + mediaTypes.join(', '));
    }

    return [selectedMediaType!, selectedEncoding];
  }

  /**
    * From a list of possible media types, choose the one we can handle best.
    * TODO: remove this method in favour of getPreferredMediaTypeAndEncoding
    *
    * The order of the given media types does not have any impact on the choice
    * made.
    */
  public static getPreferredMediaType(mediaTypes: Array<string>): string {
    /** According to OAS 3 we should default to json */
    if (!mediaTypes || mediaTypes.length === 0) {
      return "application/json";
    }

    const normalMediaTypes = mediaTypes.map(ObjectSerializer.normalizeMediaType);

    for (const predicate of supportedMimeTypePredicatesWithPriority) {
        for (const mediaType of normalMediaTypes) {
            if (mediaType != null && predicate(mediaType)) {
                return mediaType;
            }
        }
    }

    throw new Error("None of the given media types are supported: " + mediaTypes.join(", "));
  }

  /**
    * Convert data to a string according the given media type
    */
  public static stringify(data: any, mediaType: string): string {
    if (isTextLikeMimeType(mediaType)) {
        return String(data);
    }

    if (isJsonLikeMimeType(mediaType)) {
        return JSON.stringify(data);
    }

    if (isCertMediaType(mediaType)) {
      switch (mediaType) {
        case 'application/x-x509-ca-cert':  // DER binary
        case 'application/x-pem-file':      // PEM
          return data;
        case 'application/pkix-cert': {     // DER base64-encoded
          const isBinary = typeof data === 'string' && data.charCodeAt(0) === 0x30;
          if (isBinary) {
            {{#platforms}}
            {{#node}}
            data = Buffer.from(data, 'binary').toString('base64');
            {{/node}}
            {{^node}}
            data = btoa(data);
            {{/node}}
            {{/platforms}}
          }
          return data;
        }
      }
    }

    throw new Error("The mediaType " + mediaType + " is not supported by ObjectSerializer.stringify.");
  }

  /**
    * Parse data from a string according to the given media type
    */
  public static parse(rawData: string, mediaType: string | undefined) {
    if (mediaType === undefined) {
      throw new Error('Cannot parse content. No Content-Type defined.');
    }

    if (isTextLikeMimeType(mediaType)) {
        return rawData;
    }

    if (isJsonLikeMimeType(mediaType)) {
        return JSON.parse(rawData);
    }

    throw new Error('The mediaType ' + mediaType + ' is not supported by ObjectSerializer.parse.');
  }
}
