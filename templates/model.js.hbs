/*!
 * Copyright (c) 2017-2020, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */


/* THIS FILE IS AUTO-GENERATED - SEE CONTRIBUTOR DOCUMENTATION */

{{#if extends~}}
var {{extends}} = require('./{{extends}}');
{{else}}
var Resource = require('../resource');
{{/if}}
{{{modelImportBuilder this}}}

/**
 * @class {{modelName}}
{{#if extends}}
 * @extends {{extends}}
{{else}}
 * @extends Resource
{{/if}}
{{#each properties}}
{{#if this.$ref}}
{{#if (ne this.model "object") }}
{{#unless (isRestrictedPropertyOverride ../modelName this.propertyName)}}
 * @property { {{model}} } {{this.propertyName}}
 {{/unless}}
{{/if}}
{{else}}
 * @property { {{this.commonType}} } {{this.propertyName}}
{{/if}}
{{/each}}
 */
{{#if extends}}
class {{modelName}} extends {{extends}} {
{{else}}
class {{modelName}} extends Resource {
{{/if}}
  constructor(resourceJson, client) {
    super(resourceJson, client);
{{{propertyCastBuilder this}}}
  }

  {{#each crud}}
  {{#if (eq alias 'update')}}
  {{{modelMethodPublicArgumentJsDocBuilder this ../modelName}}}{{alias}}({{modelMethodPublicArgumentBuilder this ../modelName}}) {
    return this.httpClient.{{operation.operationId}}({{modelMethodProxyArgumentBuilder this ../modelName}});
  }
  {{/if}}
  {{#if (eq alias 'delete')}}
  {{{modelMethodPublicArgumentJsDocBuilder this ../modelName}}}{{alias}}({{modelMethodPublicArgumentBuilder this ../modelName}}) {
    return this.httpClient.{{operation.operationId}}({{modelMethodProxyArgumentBuilder this ../modelName}});
  }
  {{/if}}
  {{/each}}
  {{#each methods}}

  {{{modelMethodPublicArgumentJsDocBuilder this ../modelName}}}{{alias}}({{modelMethodPublicArgumentBuilder this ../modelName}}) {
    return this.httpClient.{{operation.operationId}}({{modelMethodProxyArgumentBuilder this ../modelName}});
  }
  {{/each}}
}

module.exports = {{modelName}};
